<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero&#39;s Blog</title>
  <subtitle>点滴分享 多彩生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://czero000.github.io/"/>
  <updated>2017-01-11T06:59:41.684Z</updated>
  <id>http://czero000.github.io/</id>
  
  <author>
    <name>C.c</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨平台桌面日历软件rainlendar</title>
    <link href="http://czero000.github.io/2017/01/11/rainlendar.html"/>
    <id>http://czero000.github.io/2017/01/11/rainlendar.html</id>
    <published>2017-01-11T06:58:57.000Z</published>
    <updated>2017-01-11T06:59:41.684Z</updated>
    
    <content type="html"><![CDATA[<p>Rainlendar 是一款跨平台桌面日历软件，它支持 Windows 、Mac 及 Linux，它的功能是能在桌面上显示一个漂亮的桌面日历及待办事项等等.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://www.rainlendar.net/download/rainlendar2-lite_2.13.1.b147-1_amd64.deb</div><div class="line">sudo apt install -f</div><div class="line">/usr/bin/rainlendar2</div></pre></td></tr></table></figure>
<p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://ofc9x1ccn.bkt.clouddn.com/other/rainlendar2-lite_2.13.1.b147-1_amd64.deb</div><div class="line">http://ofc9x1ccn.bkt.clouddn.com/other/Simplified_Chinese.r2lang</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rainlendar 是一款跨平台桌面日历软件，它支持 Windows 、Mac 及 Linux，它的功能是能在桌面上显示一个漂亮的桌面日历及待办事项等等.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
      <category term="Other" scheme="http://czero000.github.io/categories/Other/"/>
    
    
      <category term="rainlendar" scheme="http://czero000.github.io/tags/rainlendar/"/>
    
  </entry>
  
  <entry>
    <title>更改SSH Key密码</title>
    <link href="http://czero000.github.io/2017/01/11/change-sshkey.html"/>
    <id>http://czero000.github.io/2017/01/11/change-sshkey.html</id>
    <published>2017-01-11T06:19:55.000Z</published>
    <updated>2017-01-11T07:20:57.784Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <code>ssh-keygen</code> 生成带有密码的私钥文件，当想要更改密码，可以通过下面方式更改密码或者将密码置为空。</p>
<ul>
<li>使用 <code>ssh-keygen</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ssh-keygen -f id_rsa -p</div></pre></td></tr></table></figure>
<ul>
<li>使用 <code>openssl</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in ~/.ssh/id_rsa -out ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 &lt;code&gt;ssh-keygen&lt;/code&gt; 生成带有密码的私钥文件，当想要更改密码，可以通过下面方式更改密码或者将密码置为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
    
      <category term="ssh-key" scheme="http://czero000.github.io/tags/ssh-key/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装bind-从服务器</title>
    <link href="http://czero000.github.io/2017/01/09/install-bind-on-centos7.html"/>
    <id>http://czero000.github.io/2017/01/09/install-bind-on-centos7.html</id>
    <published>2017-01-09T09:43:54.000Z</published>
    <updated>2017-01-11T07:14:46.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><ul>
<li>系统版本: <code>CentOS Linux release 7.1.1503 (Core)</code> </li>
<li>软件安装: <code>bind bind-libs bind-devel bind-utils bind-chroot</code></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install bind bind-libs bind-devel bind-utils bind-chroot -y</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li><p>拷贝 bind 相关文件， 准备 bind chroot 环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -R /usr/share/doc/bind-*/sample/var/named/* /var/named/chroot/var/named/</div></pre></td></tr></table></figure>
</li>
<li><p>在 bind chroot 的目录中创建相关文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch /var/named/chroot/var/named/data/cache_dump.db</div><div class="line">touch /var/named/chroot/var/named/data/named_stats.txt</div><div class="line">touch /var/named/chroot/var/named/data/named_mem_stats.txt</div><div class="line">touch /var/named/chroot/var/named/data/named.run</div><div class="line">mkdir /var/named/chroot/var/named/dynamic</div><div class="line">touch /var/named/chroot/var/named/dynamic/managed-keys.bind</div></pre></td></tr></table></figure>
</li>
<li><p>变更目录权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown -R named:named /var/named/chroot/var/named/data</div><div class="line">chown -R named:named /var/named/chroot/var/named/dynamic</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝 named.conf 配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -p /etc/named.conf /var/named/chroot/etc/named.conf</div></pre></td></tr></table></figure>
</li>
<li><p>修改 bind 配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">more named.conf </div><div class="line">// Default named.conf generated by install of bind-9.2.4-27.0.1.el4</div><div class="line">options &#123;</div><div class="line">        listen-on port 53 &#123; 120.32.45.205; &#125;;</div><div class="line">        directory &quot;/var/named&quot;;</div><div class="line">        dump-file &quot;/var/named/data/cache_dump.db&quot;;</div><div class="line">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</div><div class="line">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</div><div class="line">        version &quot;oOoOo...&quot;;</div><div class="line">        allow-query     &#123; any; &#125;;</div><div class="line">        recursion       no;</div><div class="line">        allow-transfer  &#123; 120.132.45.129/25; 59.151.49.0/24; &#125;;</div><div class="line">        pid-file&quot;/run/named/named.pid&quot;;</div><div class="line">        session-keyfile &quot;/run/named/session.key&quot;;</div><div class="line">        managed-keys-directory &quot;/var/named/dynamic&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">controls &#123;</div><div class="line">        inet 127.0.0.1 allow &#123; localhost; &#125; keys &#123; rndckey; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">include &quot;/etc/rndc.key&quot;;</div><div class="line"></div><div class="line">logging &#123;</div><div class="line">        channel &quot;named_log&quot; &#123;</div><div class="line">        file &quot;/var/named/logs/named.log&quot; versions 10 size 5m;</div><div class="line">        severity dynamic;</div><div class="line">        print-category yes;</div><div class="line">        print-severity yes;</div><div class="line">        print-time yes;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">channel &quot;query_log&quot; &#123;</div><div class="line">        file &quot;/var/named/logs/query.log&quot; versions 10 size 5m;</div><div class="line">        severity debug;</div><div class="line">        print-severity yes;</div><div class="line">        print-time yes;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">category default &#123; named_log; &#125;;</div><div class="line">category queries &#123; query_log; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">zone &quot;.&quot; IN &#123;</div><div class="line">        type hint;</div><div class="line">        file &quot;named.cache&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">zone &quot;linekong.cn&quot; IN &#123;</div><div class="line">        type slave;</div><div class="line">        masters &#123; 59.151.149.101; &#125;; </div><div class="line">        file &quot;likong.cn.db&quot;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>zone 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">vim /var/named/chroot/var/named/example.local.zone</div><div class="line">;</div><div class="line">;       Addresses and other host information.</div><div class="line">;</div><div class="line">$TTL 86400</div><div class="line">@       IN      SOA     example.local. hostmaster.example.local. (</div><div class="line">                               2014101901      ; Serial</div><div class="line">                               43200      ; Refresh</div><div class="line">                               3600       ; Retry</div><div class="line">                               3600000    ; Expire</div><div class="line">                               2592000 )  ; Minimum</div><div class="line"> </div><div class="line">;       Define the nameservers and the mail servers</div><div class="line"> </div><div class="line">               IN      NS      ns1.example.local.</div><div class="line">               IN      NS      ns2.example.local.</div><div class="line">               IN      A       192.168.0.70</div><div class="line">               IN      MX      10 mx.example.local.</div><div class="line"> </div><div class="line">centos7          IN      A       192.168.0.70</div><div class="line">mx               IN      A       192.168.0.50</div><div class="line">ns1              IN      A       192.168.0.70</div><div class="line">ns2              IN      A       192.168.0.80</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/setup-named-chroot.sh /var/named/chroot on</div><div class="line">systemctl stop named</div><div class="line">systemctl disable named</div><div class="line">systemctl start named-chroot</div><div class="line">systemctl enable named-chroot</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;系统版本: &lt;code&gt;CentOS Linux release 7.1.1503 (Core)&lt;/code&gt; 
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
      <category term="DNS" scheme="http://czero000.github.io/categories/System/DNS/"/>
    
    
      <category term="bind" scheme="http://czero000.github.io/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>docker资源</title>
    <link href="http://czero000.github.io/2017/01/06/docker-resource.html"/>
    <id>http://czero000.github.io/2017/01/06/docker-resource.html</id>
    <published>2017-01-06T02:44:48.000Z</published>
    <updated>2017-01-11T07:07:21.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker资源"><a href="#Docker资源" class="headerlink" title="Docker资源"></a>Docker资源</h1><h2 id="Docker官方英文资源："><a href="#Docker官方英文资源：" class="headerlink" title="Docker官方英文资源："></a>Docker官方英文资源：</h2><ul>
<li>docker官网：<a href="http://www.docker.com" target="_blank" rel="external">http://www.docker.com</a></li>
<li>Docker windows入门：<a href="https://docs.docker.com/windows/" target="_blank" rel="external">https://docs.docker.com/windows/</a></li>
<li>Docker Linux 入门：<a href="https://docs.docker.com/linux/" target="_blank" rel="external">https://docs.docker.com/linux/</a></li>
<li>Docker mac 入门：<a href="https://docs.docker.com/mac/" target="_blank" rel="external">https://docs.docker.com/mac/</a></li>
<li>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="external">https://docs.docker.com/engine/userguide/</a></li>
<li>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="external">http://blog.docker.com/</a></li>
<li>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a></li>
<li>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="external">https://www.docker.com/open-source</a></li>
</ul>
<h2 id="Docker中文资源："><a href="#Docker中文资源：" class="headerlink" title="Docker中文资源："></a>Docker中文资源：</h2><ul>
<li>Docker中文网站：<a href="http://www.docker.org.cn" target="_blank" rel="external">http://www.docker.org.cn</a></li>
<li>Docker入门教程: <a href="http://www.docker.org.cn/book/docker.html" target="_blank" rel="external">http://www.docker.org.cn/book/docker.html</a></li>
<li>Docker安装手册：<a href="http://www.docker.org.cn/book/install.html" target="_blank" rel="external">http://www.docker.org.cn/book/install.html</a></li>
<li>一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22" target="_blank" rel="external">https://blog.csphere.cn/archives/22</a></li>
<li>docker从入门到实践：<a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">http://dockerpool.com/static/books/docker_practice/index.html</a></li>
<li>Docker纸质书：<a href="http://www.docker.org.cn/dockershuji.html" target="_blank" rel="external">http://www.docker.org.cn/dockershuji.html</a></li>
<li>DockerPPT：<a href="http://www.docker.org.cn/dockerppt.html" target="_blank" rel="external">http://www.docker.org.cn/dockerppt.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker资源&quot;&gt;&lt;a href=&quot;#Docker资源&quot; class=&quot;headerlink&quot; title=&quot;Docker资源&quot;&gt;&lt;/a&gt;Docker资源&lt;/h1&gt;&lt;h2 id=&quot;Docker官方英文资源：&quot;&gt;&lt;a href=&quot;#Docker官方英文资源：&quot; c
    
    </summary>
    
      <category term="运维技术" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>nfs挂载错误</title>
    <link href="http://czero000.github.io/2017/01/05/nfs-error.html"/>
    <id>http://czero000.github.io/2017/01/05/nfs-error.html</id>
    <published>2017-01-05T13:56:33.000Z</published>
    <updated>2017-01-11T07:08:22.454Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>ubuntu-16.04</code>中挂载nfs 提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mount: wrong fs type, bad option, bad superblock on 172.16.8.88:/data/gjobs/upload,</div><div class="line">       missing codepage or helper program, or other error</div><div class="line">       (for several filesystems (e.g. nfs, cifs) you might</div><div class="line">       need a /sbin/mount.&lt;type&gt; helper program)</div><div class="line"></div><div class="line">       In some cases useful info is found in syslog - try</div><div class="line">       dmesg | tail or so.</div></pre></td></tr></table></figure></p>
<p>解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install nfs-common</div><div class="line">yum install nfs-utils</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;ubuntu-16.04&lt;/code&gt;中挂载nfs 提示&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div 
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
      <category term="NFS" scheme="http://czero000.github.io/categories/System/NFS/"/>
    
    
      <category term="nfs" scheme="http://czero000.github.io/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>Mac软件推荐</title>
    <link href="http://czero000.github.io/2017/01/04/mac-software.html"/>
    <id>http://czero000.github.io/2017/01/04/mac-software.html</id>
    <published>2017-01-04T06:58:57.000Z</published>
    <updated>2017-01-11T07:15:49.529Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>分类</th>
<th>软件名</th>
<th>标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>写作</td>
<td><strong>ulysses</strong></td>
<td>markdown</td>
</tr>
<tr>
<td></td>
<td><strong>mou</strong></td>
<td>markdown</td>
</tr>
<tr>
<td></td>
<td><strong>iA writer 和 MWeb</strong></td>
<td>markdown</td>
</tr>
<tr>
<td>工具</td>
<td><strong>Gemini 2</strong></td>
<td>删除重复软件</td>
</tr>
<tr>
<td></td>
<td><strong>Duplicate Finder</strong></td>
<td>删除重复软件(智能)</td>
</tr>
<tr>
<td></td>
<td><strong>Downie</strong></td>
<td>视频下载</td>
</tr>
<tr>
<td></td>
<td><strong>快贴</strong></td>
<td>跨平台复制粘贴软件</td>
</tr>
<tr>
<td></td>
<td><strong>Alfred</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>Yomail</strong></td>
<td>邮件软件</td>
</tr>
<tr>
<td></td>
<td><strong>在线视频播放器</strong></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>Lastpass</strong></td>
<td>密码管理</td>
</tr>
<tr>
<td><strong>美化类</strong></td>
<td><strong>Pixelmator 和 affinity photo</strong></td>
<td>照片美化</td>
</tr>
<tr>
<td></td>
<td><strong>iFoto Converter</strong></td>
<td>打水印</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;软件名&lt;/th&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;写作&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ulysses&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;mark
    
    </summary>
    
      <category term="Mac" scheme="http://czero000.github.io/categories/Mac/"/>
    
    
      <category term="mac" scheme="http://czero000.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>GoForIt-待办事项及倒计时器</title>
    <link href="http://czero000.github.io/2017/01/04/go-for-it.html"/>
    <id>http://czero000.github.io/2017/01/04/go-for-it.html</id>
    <published>2017-01-04T06:58:57.000Z</published>
    <updated>2017-01-11T07:09:54.235Z</updated>
    
    <content type="html"><![CDATA[<p>如果您是拖延症患者的话，这款集成了待办事项及倒计时器的小软件或许可以帮助您提高工作效率。</p>
<p>Go For It! 界面透着 Elementary/GNOME HIG 的简洁风格，使用 Vala/GTK3 创建，其待办事项部分以 Todo.txt（更多说明参见文末）格式保存。</p>
<p>这个<a href="https://www.youtube.com/watch?v=mnw556C9FZQ#t=150" target="_blank" rel="external">视频说明了 Go For It! 的工作流程（朝内镜像）</a>，简单来说：</p>
<ol>
<li>在待办事项里添加打算完成的工作。</li>
<li>选择一个事项，在倒计时器里设定预期完成时间，点击开始。</li>
<li>开始工作。</li>
<li>倒计时结束或任务完成后，点击确定将事项标记为完成。</li>
<li>可以在事项完成后添加一个休息时间。</li>
</ol>
<p>Go For It! 提供 Linux 及 <a href="http://manuel-kehl.de/projects/go-for-it/download-windows-version" target="_blank" rel="external">Win</a> 平台版本，不久将提供 OS X 版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ubuntu PPA：</div><div class="line">sudo add-apt-repository ppa:mank319/go-for-it &amp;&amp; sudo apt-get update</div><div class="line">sudo apt-get install go-for-it</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/mank319/Go-For-It" target="_blank" rel="external">Github编译指南</a></p>
<p>与 Evernote 或 Google Keep 等具备待办事项功能的便笺本相比，<a href="http://todotxt.com/" target="_blank" rel="external">Todo.txt</a> 利用预定义纯文本方式记录事项，某种意义上保证了向前兼容性。同时因为是简单的纯文本，它可以方便和各个平台进行集成，包括命令行终端及 Vim 插件。iOS 及 Android 客户端更是不在话下。同步的工作由 Dropbox 实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果您是拖延症患者的话，这款集成了待办事项及倒计时器的小软件或许可以帮助您提高工作效率。&lt;/p&gt;
&lt;p&gt;Go For It! 界面透着 Elementary/GNOME HIG 的简洁风格，使用 Vala/GTK3 创建，其待办事项部分以 Todo.txt（更多说明参见文末
    
    </summary>
    
      <category term="Other" scheme="http://czero000.github.io/categories/Other/"/>
    
    
      <category term="goforit" scheme="http://czero000.github.io/tags/goforit/"/>
    
  </entry>
  
  <entry>
    <title>精简docker镜像</title>
    <link href="http://czero000.github.io/2016/12/01/simplify-docker-image.html"/>
    <id>http://czero000.github.io/2016/12/01/simplify-docker-image.html</id>
    <published>2016-12-01T09:27:14.000Z</published>
    <updated>2016-12-01T09:29:49.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/docker-images.png" alt=""><br>图注：一张图掌握 Docker 命令 - 简化版</p>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/docker-commands.png" alt=""><br>图注：一张图掌握 Docker 命令 - 完整版</p>
<p>在 docker 镜像的制作过程中，有不少方式可以减少容器的空间占用，甚至镜像可以精简 98%，精简 docker 镜像，既节省了存储空间，又能节省带宽，加快传输。</p>
<h1 id="镜像层"><a href="#镜像层" class="headerlink" title="镜像层"></a>镜像层</h1><p>在开始制作镜像前，首先了解镜像的原理，而这其中最重要的概念就是镜像层(Layers)<br><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/docker-image-layers.png" alt=""><br>在 <code>Dockerfile</code> 中的每条指令都会创建一个镜像层，继而会增加整体镜像的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FROM busybox  </div><div class="line">RUN mkdir /tmp/foo  </div><div class="line">RUN dd if=/dev/zero of=/tmp/foo/bar bs=1048576 count=100  </div><div class="line">RUN rm /tmp/foo/bar</div></pre></td></tr></table></figure>
<p>在上面例子中，最终容器没有变回，但是新生成的镜像会比原生镜像大。</p>
<h1 id="精简方法"><a href="#精简方法" class="headerlink" title="精简方法"></a>精简方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 原始 Dockerfile　文件</div><div class="line">FROM ubuntu:trusty  </div><div class="line">ENV VER     3.0.0  </div><div class="line">ENV TARBALL http://download.redis.io/releases/redis-$VER.tar.gz  </div><div class="line"># ==&gt; Install curl and helper tools...</div><div class="line">RUN apt-get update  </div><div class="line">RUN apt-get install -y  curl make gcc  </div><div class="line"># ==&gt; Download, compile, and install...</div><div class="line">RUN curl -L $TARBALL | tar zxv  </div><div class="line">WORKDIR  redis-$VER  </div><div class="line">RUN make  </div><div class="line">RUN make install  </div><div class="line">#...</div><div class="line"># ==&gt; Clean up...</div><div class="line">WORKDIR /  </div><div class="line">RUN apt-get remove -y --auto-remove curl make gcc  </div><div class="line">RUN apt-get clean  </div><div class="line">RUN rm -rf /var/lib/apt/lists/*  /redis-$VER  </div><div class="line">#...</div><div class="line">CMD [&quot;redis-server&quot;]</div></pre></td></tr></table></figure>
<p>通过这个例子，演示如何精简 docker 镜像大小。</p>
<h2 id="1-优化基础镜像"><a href="#1-优化基础镜像" class="headerlink" title="1. 优化基础镜像"></a>1. 优化基础镜像</h2><p>选用更小的基础镜像，在常用的 Linux 系统镜像中，Ubuntu、Centos、Debian中，debian 更为轻量。</p>
<h2 id="2-减少构建步骤"><a href="#2-减少构建步骤" class="headerlink" title="2. 减少构建步骤"></a>2. 减少构建步骤</h2><p>串联 Dockerfile 指令（一般为 RUN 命令）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 优化后的 Dockerfile</div><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">ENV VER     3.0.0  </div><div class="line">ENV TARBALL http://download.redis.io/releases/redis-$VER.tar.gz</div><div class="line"></div><div class="line">RUN echo &quot;==&gt; Install curl and helper tools...&quot;  &amp;&amp; \  </div><div class="line">    apt-get update                      &amp;&amp; \</div><div class="line">    apt-get install -y  curl make gcc   &amp;&amp; \</div><div class="line">    \</div><div class="line">    echo &quot;==&gt; Download, compile, and install...&quot;  &amp;&amp; \</div><div class="line">    curl -L $TARBALL | tar zxv  &amp;&amp; \</div><div class="line">    cd redis-$VER               &amp;&amp; \</div><div class="line">    make                        &amp;&amp; \</div><div class="line">    make install                &amp;&amp; \</div><div class="line">    ...</div><div class="line">    echo &quot;==&gt; Clean up...&quot;  &amp;&amp; \</div><div class="line">    apt-get remove -y --auto-remove curl make gcc  &amp;&amp; \</div><div class="line">    apt-get clean                                  &amp;&amp; \</div><div class="line">    rm -rf /var/lib/apt/lists/*  /redis-$VER</div><div class="line">#...</div><div class="line">CMD [&quot;redis-server&quot;]</div></pre></td></tr></table></figure></p>
<h2 id="3-压缩镜像"><a href="#3-压缩镜像" class="headerlink" title="3. 压缩镜像"></a>3. 压缩镜像</h2><ul>
<li>使用命令或者工具压缩镜像</li>
</ul>
<p>docker 自带的一些命令还能协助压缩镜像，比如 export 和 import<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -d redis:lab-3</div><div class="line">$ docker export 71b1c0ad0a2b | docker import - redis:lab-4</div></pre></td></tr></table></figure></p>
<p>麻烦的是需要先将容器运行起来，而且这个过程中你会丢失镜像原有的一些信息，比如：导出端口，环境变量，默认指令。</p>
<ul>
<li>使用 <a href="https://github.com/jwilder/docker-squash" target="_blank" rel="external">docker-squash</a></li>
</ul>
<p><a href="https://github.com/jwilder/docker-squash#installation" target="_blank" rel="external">下载安装</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker save redis:lab-3 \</div><div class="line"> | sudo docker-squash -verbose -t redis:lab-4  \</div><div class="line"> | docker load</div></pre></td></tr></table></figure></p>
<h2 id="4-使用最精简的基础镜像"><a href="#4-使用最精简的基础镜像" class="headerlink" title="4. 使用最精简的基础镜像"></a>4. 使用最精简的基础镜像</h2><p>使用 scratch 或者 busybox 作为基础镜像。</p>
<p>关于 scratch</p>
<ul>
<li>一个空镜像，只能用于构建镜像，通过 FROM scratch</li>
<li>在构建一些基础镜像，比如 debian 、 busybox，非常有用</li>
<li>用于构建超少镜像，比如构建一个包含所有库的二进制文件</li>
</ul>
<p>关于 busybox + 只有 1~5M 的大小 + 包含了常用的 UNIX 工具 + 非常方便构建小镜像这些超小的基础镜像，结合能生成静态原生 ELF 文件的编译语言，比如C/C++，比如 Go，特别方便构建超小的镜像。</p>
<h2 id="5-提取动态链接的-so-文件"><a href="#5-提取动态链接的-so-文件" class="headerlink" title="5. 提取动态链接的 .so 文件"></a>5. 提取动态链接的 .so 文件</h2><ul>
<li>查看系统信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat /etc/os-release</div><div class="line"></div><div class="line">NAME=&quot;Ubuntu&quot;  </div><div class="line">VERSION=&quot;14.04.2 LTS, Trusty Tahr&quot;  </div><div class="line"></div><div class="line">uname -a</div><div class="line">Linux localhost 3.13.0-46-generic #77-Ubuntu SMP  </div><div class="line">Mon Mar 2 18:23:39 UTC 2015  </div><div class="line">x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
<ul>
<li>打印共享的依赖库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ldd  redis-3.0.0/src/redis-server</div><div class="line">    linux-vdso.so.1 =&gt;  (0x00007fffde365000)</div><div class="line">    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f307d5aa000)</div><div class="line">    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f307d38c000)</div><div class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f307cfc6000)</div><div class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007f307d8b9000)</div></pre></td></tr></table></figure>
<ul>
<li>打包需要的库文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar ztvf rootfs.tar.gz</div><div class="line">4485167  2015-04-21 22:54  usr/local/bin/redis-server  </div><div class="line">1071552  2015-02-25 16:56  lib/x86_64-linux-gnu/libm.so.6  </div><div class="line"> 141574  2015-02-25 16:56  lib/x86_64-linux-gnu/libpthread.so.0</div><div class="line">1840928  2015-02-25 16:56  lib/x86_64-linux-gnu/libc.so.6  </div><div class="line"> 149120  2015-02-25 16:56  lib64/ld-linux-x86-64.so.2</div></pre></td></tr></table></figure>
<ul>
<li>制作 Dockerfile</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM scratch  </div><div class="line">ADD  rootfs.tar.gz  /  </div><div class="line">COPY redis.conf     /etc/redis/redis.conf  </div><div class="line">EXPOSE 6379  </div><div class="line">CMD [&quot;redis-server&quot;]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ofc9x1ccn.bkt.clouddn.com/docker/docker-images.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;图注：一张图掌握 Docker 命令 - 简化版&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ofc9x1cc
    
    </summary>
    
      <category term="运维技术" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>多容器应用栈</title>
    <link href="http://czero000.github.io/2016/11/18/many-container-on-docker.html"/>
    <id>http://czero000.github.io/2016/11/18/many-container-on-docker.html</id>
    <published>2016-11-18T09:19:51.000Z</published>
    <updated>2016-11-18T09:22:13.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多容器应用栈"><a href="#多容器应用栈" class="headerlink" title="多容器应用栈"></a>多容器应用栈</h1><p>创建一个使用 Express 框架的、带有 Redis 后端的 Node.js 应用，并完全 Docker 化。应用会创建一系列的镜像来部署多容器应用。</p>
<ul>
<li>Nodejs 容器，服务于 Node 应用</li>
<li>Redis 容器，用于保存和集群化应用状态，Redis 会有两个备份容器</li>
<li>日志容器，用于捕捉应用日志</li>
</ul>
<h2 id="Redis-镜像"><a href="#Redis-镜像" class="headerlink" title="Redis 镜像"></a>Redis 镜像</h2><h3 id="Redis-基础镜像"><a href="#Redis-基础镜像" class="headerlink" title="Redis 基础镜像"></a>Redis 基础镜像</h3><p>构建 Redis 基础镜像，之后会使用基础镜像构建主从 Redis 镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t czero/redis .</div></pre></td></tr></table></figure></p>
<p><a href="http://ofc9x1ccn.bkt.clouddn.com/upload/docker/redis.tar.gz" target="_blank" rel="external">Redis Dockerfile</a></p>
<h3 id="构建-Redis-主镜像"><a href="#构建-Redis-主镜像" class="headerlink" title="构建 Redis 主镜像"></a>构建 Redis 主镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t czero/redis-primary .</div></pre></td></tr></table></figure>
<p>通过 <code>ENTRYPOINT</code> 指令制定了 <code>Redis</code> 服务的启动命令，<code>Redis</code> 服务的日志文件保存到<code>/var/log/redis/redis-server.log</code></p>
<p><a href="http://ofc9x1ccn.bkt.clouddn.com/upload/docker/redis_primary.tar.gz" target="_blank" rel="external">Redis_primary Dockerfile</a></p>
<h3 id="构建-Redis-从镜像"><a href="#构建-Redis-从镜像" class="headerlink" title="构建 Redis 从镜像"></a>构建 Redis 从镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t czero/redis_replica .</div></pre></td></tr></table></figure>
<p><a href="http://ofc9x1ccn.bkt.clouddn.com/upload/docker/redis_replica.tar.gz" target="_blank" rel="external">Redis_replica Dockerfile</a></p>
<h3 id="创建-Redis-后端集群"><a href="#创建-Redis-后端集群" class="headerlink" title="创建 Redis 后端集群"></a>创建 Redis 后端集群</h3><h4 id="构建-Redis-主容器"><a href="#构建-Redis-主容器" class="headerlink" title="构建 Redis 主容器"></a>构建 Redis 主容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -h Redisprimary --name redis_primary czero/redis_primary:latest</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>-h</code>参数用来指定容器的主机名，用来后面从容器正确解析 <code>Redisprimary</code></li>
<li>使用<code>--name</code>指定容器名</li>
</ul>
<p>如果想要查看 <code>redis</code> 日志，直接使用<code>docker logs redis_primary</code> 会发现没有任何输出，因为<code>redis</code>把日志输出到日志文件中，可以运行另外一个容器来查看日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">docker run -ti --rm --volumes-from=redis_primary ubuntu:16.04 cat /var/log/redis/redis-server.log</div><div class="line"></div><div class="line">1:M 16 Nov 02:52:25.518 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</div><div class="line">1:M 16 Nov 02:52:25.518 # Server started, Redis version 3.0.7</div><div class="line">1:M 16 Nov 02:52:25.518 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</div><div class="line">1:M 16 Nov 02:52:25.518 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</div><div class="line">1:M 16 Nov 02:52:25.518 * The server is now ready to accept connections on port 6379</div><div class="line">1:M 16 Nov 04:10:50.447 * Slave 172.17.0.3:6379 asks for synchronization</div><div class="line">1:M 16 Nov 04:10:50.447 * Full resync requested by slave 172.17.0.3:6379</div><div class="line">1:M 16 Nov 04:10:50.447 * Starting BGSAVE for SYNC with target: disk</div><div class="line">1:M 16 Nov 04:10:50.448 * Background saving started by pid 9</div><div class="line">9:C 16 Nov 04:10:50.478 * DB saved on disk</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>--rm</code> 参数指定的容器，只会运行一次，进程结束之后便会删除</li>
<li>使用<code>--volumes-from=</code>参数指定挂载那个容器的所有卷</li>
<li>后面便是指定使用某个镜像、执行某些命令</li>
</ul>
<h4 id="构建-Redis-从容器"><a href="#构建-Redis-从容器" class="headerlink" title="构建　Redis 从容器"></a>构建　Redis 从容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -d -h Redisreplica1 --name redis_replica1 --link redis_primary:Redisprimary czero/redis_replica:latest</div><div class="line">docker run -d -h Redisreplica2 --name redis_replica2 --link redis_primary:Redisprimary czero/redis_replica:latest</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>-h</code>参数用来指定容器的主机名</li>
<li>使用<code>--name</code>指定容器名</li>
<li>使用<code>--link</code> 将<code>redis_primary</code>以别名<code>Redisprimary</code>连接到 <code>Redis</code> 从容器</li>
</ul>
<p>查看<code>redis_replica</code>的log，看看主从时候正常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">docker run -ti --rm --volumes-from=redis_replica1 ubuntu:16.04 cat /var/log/redis/redis-replica.log</div><div class="line"></div><div class="line">1:S 16 Nov 04:10:50.445 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</div><div class="line">1:S 16 Nov 04:10:50.445 # Server started, Redis version 3.0.7</div><div class="line">1:S 16 Nov 04:10:50.445 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</div><div class="line">1:S 16 Nov 04:10:50.445 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</div><div class="line">1:S 16 Nov 04:10:50.445 * The server is now ready to accept connections on port 6379</div><div class="line">1:S 16 Nov 04:10:50.445 * Connecting to MASTER Redisprimary:6379</div><div class="line">1:S 16 Nov 04:10:50.446 * MASTER &lt;-&gt; SLAVE sync started</div><div class="line">1:S 16 Nov 04:10:50.446 * Non blocking connect for SYNC fired the event.</div><div class="line">1:S 16 Nov 04:10:50.446 * Master replied to PING, replication can continue...</div><div class="line">1:S 16 Nov 04:10:50.447 * Partial resynchronization not possible (no cached master)</div><div class="line">1:S 16 Nov 04:10:50.454 * Full resync from master: 48e2c5daef6f05d3e3d03c074001e301073da55b:1</div><div class="line">1:S 16 Nov 04:10:50.545 * MASTER &lt;-&gt; SLAVE sync: receiving 18 bytes from master</div><div class="line">1:S 16 Nov 04:10:50.545 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</div><div class="line">1:S 16 Nov 04:10:50.545 * MASTER &lt;-&gt; SLAVE sync: Loading DB in memory</div><div class="line">1:S 16 Nov 04:10:50.545 * MASTER &lt;-&gt; SLAVE sync: Finished with success</div></pre></td></tr></table></figure>
<h2 id="Node-js-镜像"><a href="#Node-js-镜像" class="headerlink" title="Node.js 镜像"></a>Node.js 镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">tree nodejs</div><div class="line">nodejs</div><div class="line">├── Dockerfile</div><div class="line">└── nodeapp</div><div class="line">    ├── package.json</div><div class="line">	    └── server.js</div><div class="line"></div><div class="line">		1 directory, 3 files</div><div class="line"></div><div class="line">		docker build -t czero/nodejs .</div></pre></td></tr></table></figure>
<pre><code>[Nodejs Dockerfile](http://ofc9x1ccn.bkt.clouddn.com/upload/docker/nodejs.tar.gz)
</code></pre><h3 id="创建-Node-容器"><a href="#创建-Node-容器" class="headerlink" title="创建 Node 容器"></a>创建 Node 容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d  --name nodeapp -p 3000:3000 --link redis_primary:Redisprimary czero/nodejs:latest</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>czero/nodejs:latest</code>镜像创建了一个名为 <code>nodeapp</code> 的新容器</li>
<li>使用使用<code>-p</code> 将容器的<code>3000</code>端口映射到宿主机的<code>3000</code>端口</li>
<li>使用<code>--link</code>将<code>redis_primary</code>以<code>Redisprimary</code>作为别名连接到新建的<code>nodeapp</code>容器</li>
</ul>
<h3 id="查看-Node-应用时候正常"><a href="#查看-Node-应用时候正常" class="headerlink" title="查看 Node 应用时候正常"></a>查看 Node 应用时候正常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl  localhost:3000  </div><div class="line">&#123;</div><div class="line">	  &quot;status&quot;: &quot;ok&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>Node</code>应用返回<code>OK</code>便表示应用正常，浏览器的会话状态会被记录到<code>Redis</code>主容器<code>redis_primary</code>中，然后便会同步到两个从容器<code>redis_replica1、redis_replica2</code>中</p>
<h2 id="捕获应用日志"><a href="#捕获应用日志" class="headerlink" title="捕获应用日志"></a>捕获应用日志</h2><p>现在应用已经正常运行，使用<code>logstash</code>来捕获应用日志。</p>
<h3 id="创建-logstash-镜像"><a href="#创建-logstash-镜像" class="headerlink" title="创建 logstash 镜像"></a>创建 logstash 镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t czero/logstash .</div></pre></td></tr></table></figure>
<p><a href="http://ofc9x1ccn.bkt.clouddn.com/upload/docker/logstash.tar.gz" target="_blank" rel="external">Logstash Dockerfile</a></p>
<h3 id="构建-logstash-容器"><a href="#构建-logstash-容器" class="headerlink" title="构建 logstash 容器"></a>构建 logstash 容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --name logstash --volumes-from=nodeapp --volumes-from=redis_primary czero/logstash</div></pre></td></tr></table></figure>
<ul>
<li>使用两次<code>--volumes-from</code>挂载<code>nodeapp</code>、<code>redis_primary</code>的卷，用来访问<code>Redis</code>和<code>Node</code>的日志</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker logs -f logstash</div><div class="line">&#123;</div><div class="line">	       &quot;message&quot; =&gt; &quot;::ffff:172.17.0.1 - - [Fri, 18 Nov 2016 08:30:31 GMT] \&quot;GET / HTTP/1.1\&quot; 200 20 \&quot;-\&quot; \&quot;curl/7.47.0\&quot;&quot;,</div><div class="line">		         &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">				     &quot;@timestamp&quot; =&gt; &quot;2016-11-18T08:30:31.254Z&quot;,</div><div class="line">					           &quot;host&quot; =&gt; &quot;98b2284cb329&quot;,</div><div class="line">							             &quot;path&quot; =&gt; &quot;/var/log/nodeapp/nodeapp.log&quot;,</div><div class="line">										           &quot;type&quot; =&gt; &quot;syslog&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 Node 和 Redis 的日志便都输出到 logstash里面了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多容器应用栈&quot;&gt;&lt;a href=&quot;#多容器应用栈&quot; class=&quot;headerlink&quot; title=&quot;多容器应用栈&quot;&gt;&lt;/a&gt;多容器应用栈&lt;/h1&gt;&lt;p&gt;创建一个使用 Express 框架的、带有 Redis 后端的 Node.js 应用，并完全 Docker 
    
    </summary>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Leanote备份脚本</title>
    <link href="http://czero000.github.io/2016/11/17/backup-leanote.html"/>
    <id>http://czero000.github.io/2016/11/17/backup-leanote.html</id>
    <published>2016-11-17T03:49:46.000Z</published>
    <updated>2017-01-11T07:19:21.812Z</updated>
    
    <content type="html"><![CDATA[<p>为知笔记收费了，把笔记迁移到 leanote 上，但是有担心笔记的安全，所以找到了一个备份脚本，每天备份日志到本地。</p>
<ul>
<li><p>备份脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div></pre></td><td class="code"><pre><div class="line">cat Leanote4MD.py</div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#encoding: utf8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># author: goodbest &lt;lovegoodbest@gmail.com&gt;</span></div><div class="line"><span class="comment"># github: github.com/goodbest</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> dateutil.parser</div><div class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> tz</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">from</span> requests_toolbelt <span class="keyword">import</span> SSLAdapter</div><div class="line"><span class="keyword">import</span> ssl</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> ConfigParser <span class="keyword">as</span> CP</div><div class="line"></div><div class="line">leanote_host = <span class="keyword">None</span></div><div class="line">leanote_token = <span class="keyword">None</span></div><div class="line">local_zone = <span class="keyword">None</span></div><div class="line">args = <span class="keyword">None</span></div><div class="line"></div><div class="line">configpath = <span class="string">"Leanote.cfg"</span></div><div class="line"></div><div class="line">DEBUG = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ok</span><span class="params">(myjson)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      json_object = json.loads(myjson)</div><div class="line">    <span class="keyword">except</span> ValueError, e:</div><div class="line">        <span class="keyword">print</span> e</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">'Ok'</span> <span class="keyword">in</span> json_object:</div><div class="line">        <span class="keyword">if</span> json_object[<span class="string">'Ok'</span>]:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> json_object[<span class="string">'Msg'</span>]</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_get</span><span class="params">(url, param = <span class="string">''</span>, type = <span class="string">'json'</span>, token = True)</span>:</span></div><div class="line">    <span class="keyword">if</span> token:</div><div class="line">        <span class="keyword">if</span> param:</div><div class="line">            param.update(&#123;<span class="string">'token'</span>: leanote_token&#125;)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            param=&#123;<span class="string">'token'</span>: leanote_token&#125;</div><div class="line"></div><div class="line">    s = requests.Session()</div><div class="line">    <span class="keyword">if</span> leanote_host.startswith(<span class="string">'https'</span>):</div><div class="line">        s.mount(<span class="string">'https://'</span>, SSLAdapter(ssl.PROTOCOL_TLSv1))</div><div class="line">    r = s.get(leanote_host + <span class="string">'/api/'</span> + url, params = param)</div><div class="line">    <span class="keyword">if</span> r.status_code == requests.codes.ok:</div><div class="line">        <span class="keyword">if</span> type==<span class="string">'json'</span>:</div><div class="line">            <span class="keyword">if</span> is_ok(r.text):</div><div class="line">                rj = json.loads(r.text)</div><div class="line">                <span class="comment"># if 'Msg' in rj:</span></div><div class="line">                <span class="comment">#     rj=rj['Msg']</span></div><div class="line">                <span class="keyword">return</span> rj</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">'[Err] requests to url %s fail'</span> %(r.url)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> type==<span class="string">'image'</span>:</div><div class="line">            i = Image.open(StringIO(r.content))</div><div class="line">            <span class="keyword">return</span> i</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'[Err] connect to url %s fail, error code %d '</span> %(r.url, r.status_cde)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_post</span><span class="params">(url, param = <span class="string">''</span>, type = <span class="string">'json'</span>, token = True)</span>:</span></div><div class="line">    <span class="keyword">if</span> token:</div><div class="line">        <span class="keyword">if</span> param:</div><div class="line">            param.update(&#123;<span class="string">'token'</span>: leanote_token&#125;)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            param=&#123;<span class="string">'token'</span>: leanote_token&#125;</div><div class="line"></div><div class="line">    s = requests.Session()</div><div class="line">    <span class="keyword">if</span> leanote_host.startswith(<span class="string">'https'</span>):</div><div class="line">        s.mount(<span class="string">'https://'</span>, SSLAdapter(ssl.PROTOCOL_TLSv1))</div><div class="line">    r = s.post(leanote_host + <span class="string">'/api/'</span> + url, data = param)</div><div class="line">    <span class="keyword">if</span> r.status_code == requests.codes.ok:</div><div class="line">        <span class="keyword">if</span> type==<span class="string">'json'</span>:</div><div class="line">            <span class="keyword">if</span> is_ok(r.text):</div><div class="line">                rj = json.loads(r.text)</div><div class="line">                <span class="comment"># if 'Msg' in rj:</span></div><div class="line">                <span class="comment">#     rj=rj['Msg']</span></div><div class="line">                <span class="keyword">return</span> rj</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">'[Err] requests to url %s fail'</span> %(r.url)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'[Err] connect to url %s fail, error code %d '</span> %(r.url, r.status_cde)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#ret leanote_token</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(email, pwd)</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'email'</span>: email,</div><div class="line">        <span class="string">'pwd'</span>:   pwd,</div><div class="line">    &#125;</div><div class="line">    r = req_get(<span class="string">'auth/login'</span>, param, token=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">if</span> r:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Login success! Welcome %s (%s)'</span> %(r[<span class="string">'Username'</span>], r[<span class="string">'Email'</span>])</div><div class="line">        <span class="keyword">return</span> r[<span class="string">'Token'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Login fail! Start again.'</span></div><div class="line">        exit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> req_get(<span class="string">'auth/logout'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#ret dict(notebookId: type.Notebook&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNotebooks</span><span class="params">(includeTrash = False)</span>:</span></div><div class="line">    r = req_get(<span class="string">'notebook/getNotebooks'</span>)</div><div class="line">    <span class="keyword">if</span> r:</div><div class="line">        <span class="keyword">if</span> includeTrash:</div><div class="line">            <span class="keyword">return</span> &#123;notebook[<span class="string">'NotebookId'</span>] : notebook <span class="keyword">for</span> notebook <span class="keyword">in</span> r&#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> &#123;notebook[<span class="string">'NotebookId'</span>] : notebook <span class="keyword">for</span> notebook <span class="keyword">in</span> r <span class="keyword">if</span> <span class="keyword">not</span> notebook[<span class="string">'IsDeleted'</span>]&#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#ret [type.Note], which contains noteId, and note meta data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNotesMeta</span><span class="params">(notebookId)</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'notebookId'</span>: notebookId,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> req_get(<span class="string">'note/getNotes'</span>, param)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#ret type.NoteContent</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNoteDetail</span><span class="params">(noteId)</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'noteId'</span>: noteId,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> req_get(<span class="string">'note/getNoteAndContent'</span>, param)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(fileId)</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'fileId'</span>: fileId,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> req_get(<span class="string">'file/getImage'</span>, param, type = <span class="string">'image'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNotebook</span><span class="params">(title=<span class="string">'Import'</span>, parentId=<span class="string">''</span>, seq=<span class="number">-1</span>)</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'title'</span>: title,</div><div class="line">        <span class="string">'parentNotebookId'</span>: parentId,</div><div class="line">        <span class="string">'seq'</span> : seq</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> req_post(<span class="string">'notebook/addNotebook'</span>, param)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNote</span><span class="params">(NotebookId, Title, Content, Tags=[], IsMarkdown = True, Abstract= <span class="string">''</span>, Files=[])</span>:</span></div><div class="line">    param = &#123;</div><div class="line">        <span class="string">'NotebookId'</span>: NotebookId,</div><div class="line">        <span class="string">'Title'</span>: Title,</div><div class="line">        <span class="string">'Content'</span>: Content,</div><div class="line">        <span class="string">'Tags[]'</span>: Tags,</div><div class="line">        <span class="string">'IsMarkdown'</span>: IsMarkdown,</div><div class="line">        <span class="string">'Abstract'</span>: Abstract,</div><div class="line">        <span class="comment">#'Files' : seq</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> req_post(<span class="string">'note/addNote'</span>, param)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFromFile</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">import</span> yaml</div><div class="line">    file_meta = <span class="string">''</span></div><div class="line">    file_content = <span class="string">''</span></div><div class="line">    <span class="keyword">with</span> open (filename) <span class="keyword">as</span> f:</div><div class="line">        meta_flag=<span class="keyword">False</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">            <span class="comment">#print line</span></div><div class="line">            <span class="keyword">if</span> meta_flag:</div><div class="line">                file_content += line</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> line.find(<span class="string">'---'</span>)&gt;<span class="number">-1</span>:</div><div class="line">                    meta_flag = <span class="keyword">True</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    file_meta += line</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> meta_flag:</div><div class="line">        file_content = file_meta</div><div class="line">        file_meta = <span class="string">''</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> meta_flag:</div><div class="line">        meta = yaml.load(file_meta)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        meta = &#123;&#125;</div><div class="line">    <span class="keyword">return</span> file_content, meta</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveToFile</span><span class="params">(notes, noteBooks, path = <span class="string">'.'</span>)</span>:</span></div><div class="line">    unique_noteTitle = set()</div><div class="line">    <span class="keyword">for</span> note <span class="keyword">in</span> notes:</div><div class="line">        <span class="keyword">if</span> note[<span class="string">'Title'</span>] == <span class="string">''</span>:</div><div class="line">            filename = note[<span class="string">'NoteId'</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            filename = note[<span class="string">'Title'</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> filename <span class="keyword">in</span> unique_noteTitle:</div><div class="line">            filename=<span class="string">'%s_%s'</span> %(filename, note[<span class="string">'NoteId'</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            unique_noteTitle.add(filename)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> note[<span class="string">'IsMarkdown'</span>]:</div><div class="line">            filename += <span class="string">'.md'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            filename += <span class="string">'.txt'</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">with</span> open(path + <span class="string">'/'</span> + filename, <span class="string">'w'</span>) <span class="keyword">as</span> file:</div><div class="line">                <span class="keyword">print</span> <span class="string">'write file: %s'</span> %filename</div><div class="line">                file.write(<span class="string">'title: %s\n'</span> %note[<span class="string">'Title'</span>].encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line">                date = dateutil.parser.parse(note[<span class="string">'CreatedTime'</span>])</div><div class="line">                file.write(<span class="string">'date: %s\n'</span> %datetime.strftime(date.astimezone(local_zone), <span class="string">'%Y/%m/%d %H:%M:%S'</span>))</div><div class="line"></div><div class="line">                date = dateutil.parser.parse(note[<span class="string">'UpdatedTime'</span>])</div><div class="line">                file.write(<span class="string">'updated: %s\n'</span> %datetime.strftime(date.astimezone(local_zone), <span class="string">'%Y/%m/%d %H:%M:%S'</span>))</div><div class="line"></div><div class="line">                <span class="keyword">if</span> note[<span class="string">'Tags'</span>]:</div><div class="line">                    <span class="keyword">if</span> len(note[<span class="string">'Tags'</span>]) == <span class="number">1</span>:</div><div class="line">                        <span class="keyword">if</span> note[<span class="string">'Tags'</span>][<span class="number">0</span>]:</div><div class="line">                            file.write(<span class="string">'tags:\n'</span>)</div><div class="line">                            <span class="keyword">for</span> tag <span class="keyword">in</span> note[<span class="string">'Tags'</span>]:</div><div class="line">                                file.write(<span class="string">'- %s\n'</span> %tag.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">                category = []</div><div class="line">                current_notebook = note[<span class="string">'NotebookId'</span>]</div><div class="line">                category.append(noteBooks[current_notebook][<span class="string">'Title'</span>])</div><div class="line">                <span class="keyword">while</span> noteBooks[current_notebook][<span class="string">'ParentNotebookId'</span>] != <span class="string">''</span>:</div><div class="line">                    category.append(noteBooks[noteBooks[current_notebook][<span class="string">'ParentNotebookId'</span>]][<span class="string">'Title'</span>])</div><div class="line">                    current_notebook = noteBooks[current_notebook][<span class="string">'ParentNotebookId'</span>]</div><div class="line">                file.write(<span class="string">'categories:\n'</span>)</div><div class="line">                category.reverse()</div><div class="line">                <span class="keyword">for</span> cat <span class="keyword">in</span> category:</div><div class="line">                    file.write(<span class="string">'- %s\n'</span> %cat.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">                file.write(<span class="string">'---\n'</span>)</div><div class="line">                file.write(<span class="string">'%s'</span> %note[<span class="string">'Content'</span>].encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">            file.close()</div><div class="line">            <span class="keyword">if</span> note[<span class="string">'Files'</span>]:</div><div class="line">                <span class="keyword">if</span> len(note[<span class="string">'Files'</span>]) &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">for</span> attach <span class="keyword">in</span> note[<span class="string">'Files'</span>]:</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> attach[<span class="string">'IsAttach'</span>]:</div><div class="line">                            i = getImage(attach[<span class="string">'FileId'</span>])</div><div class="line">                            <span class="keyword">print</span> <span class="string">'saving its image: %s.%s'</span> %(attach[<span class="string">'FileId'</span>], i.format)</div><div class="line">                            i.save(attach[<span class="string">'FileId'</span>] + <span class="string">'.'</span> + i.format)</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"error: "</span>, filename</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeanoteExportToMD</span><span class="params">(path = <span class="string">'.'</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Reading your notebooks...'</span></div><div class="line">    noteBooks = getNotebooks()</div><div class="line"></div><div class="line">    <span class="comment">#get not deleted notes list</span></div><div class="line">    notes=[]</div><div class="line">    <span class="keyword">for</span> notebook <span class="keyword">in</span> noteBooks.values():</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> notebook[<span class="string">'IsDeleted'</span>]:</div><div class="line">            notesMeta = getNotesMeta(notebook[<span class="string">'NotebookId'</span>])</div><div class="line">            <span class="keyword">for</span> noteMeta <span class="keyword">in</span> notesMeta:</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> noteMeta[<span class="string">'IsTrash'</span>]:</div><div class="line">                        note = getNoteDetail(noteMeta[<span class="string">'NoteId'</span>])</div><div class="line">                        notes.append(note)</div><div class="line">    <span class="keyword">print</span> <span class="string">'found %d notes'</span> %len(notes)</div><div class="line"></div><div class="line">    <span class="comment">#write file</span></div><div class="line">    saveToFile(notes, noteBooks, path = path)</div><div class="line">    <span class="keyword">print</span> <span class="string">'all done, bye~'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeanoteImportFromMD</span><span class="params">(path=<span class="string">'.'</span>)</span>:</span></div><div class="line">    <span class="comment"># filelist = os.listdir(path)</span></div><div class="line">    <span class="comment"># filelist = [file for file in filelist if file.find('.md')&gt;-1 or file.find('.txt')&gt;-1]</span></div><div class="line"></div><div class="line">    filelist = readfiles(path)</div><div class="line"></div><div class="line">    importedNotebookTitleMapID = &#123;&#125;</div><div class="line">    ret = addNotebook(title=<span class="string">'imported_note'</span>, parentId=<span class="string">''</span>, seq=<span class="number">-1</span>)</div><div class="line">    <span class="keyword">if</span> ret:</div><div class="line">        <span class="keyword">print</span> <span class="string">'imporing into a new notebook: %s'</span> %ret[<span class="string">'Title'</span>]</div><div class="line">        importedNotebookTitleMapID[<span class="string">'import'</span>] = ret[<span class="string">'NotebookId'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filelist:</div><div class="line">        content, meta = readFromFile(path + <span class="string">'/'</span> + filename)</div><div class="line">        <span class="keyword">if</span> DEBUG:</div><div class="line">            <span class="keyword">print</span> meta</div><div class="line"></div><div class="line">        parentTitle=<span class="string">'import'</span></div><div class="line">        currentTitle=<span class="string">''</span></div><div class="line">        <span class="keyword">if</span> meta.get(<span class="string">'categories'</span>):</div><div class="line">            categories= meta.get(<span class="string">'categories'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            categories=[<span class="string">'import'</span>]</div><div class="line">        <span class="keyword">for</span> cat <span class="keyword">in</span> categories:</div><div class="line">            currentTitle=cat</div><div class="line">            <span class="keyword">if</span> currentTitle <span class="keyword">in</span> importedNotebookTitleMapID.keys():</div><div class="line">                parentTitle=currentTitle</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ret = addNotebook(title = currentTitle, parentId = importedNotebookTitleMapID[parentTitle])</div><div class="line">                importedNotebookTitleMapID[currentTitle] = ret[<span class="string">'NotebookId'</span>]</div><div class="line">                parentTitle=currentTitle</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> meta.get(<span class="string">'title'</span>):</div><div class="line">            meta[<span class="string">'title'</span>] = filename.replace(<span class="string">'.md'</span>,<span class="string">''</span>).replace(<span class="string">'.txt'</span>,<span class="string">''</span>)</div><div class="line">        importedNote = addNote(NotebookId=importedNotebookTitleMapID[currentTitle], Title=meta.get(<span class="string">'title'</span>), Content=content, Tags=meta.get(<span class="string">'tags'</span>, []), Abstract=<span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> importedNote:</div><div class="line">            <span class="keyword">print</span> <span class="string">'imported %s'</span> %filename</div><div class="line">    <span class="keyword">print</span> <span class="string">'all done, bye~'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfiles</span><span class="params">(path)</span>:</span></div><div class="line">    <span class="keyword">assert</span> os.path.exists(path)</div><div class="line">    filelist = [os.path.join(root, f) <span class="keyword">for</span> root,_,files <span class="keyword">in</span> os.walk(path) <span class="keyword">for</span> f <span class="keyword">in</span> files <span class="keyword">if</span> f.find(<span class="string">'.md'</span>)&gt;<span class="number">-1</span> <span class="keyword">or</span> f.find(<span class="string">'.txt'</span>)&gt;<span class="number">-1</span>]</div><div class="line">    <span class="keyword">assert</span> filelist, <span class="string">"No files fond in %s"</span> % path</div><div class="line">    <span class="keyword">return</span> filelist</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> leanote_host</div><div class="line">    <span class="keyword">global</span> leanote_token</div><div class="line">    <span class="keyword">global</span> local_zone</div><div class="line">    <span class="keyword">global</span> args</div><div class="line"></div><div class="line">    args = init_options()</div><div class="line"></div><div class="line">    leanote_host=args.host</div><div class="line">    leanote_email=args.user</div><div class="line">    leanote_password=args.passwd</div><div class="line">    path = args.path</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'Connecting to %s'</span> %leanote_host</div><div class="line">    leanote_token = login(leanote_email, leanote_password)</div><div class="line">    local_zone=tz.tzlocal()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> args.choice == <span class="string">'import'</span>:</div><div class="line">        LeanoteImportFromMD(path)</div><div class="line">    <span class="keyword">elif</span> args.choice == <span class="string">'export'</span>:</div><div class="line">        LeanoteExportToMD(path)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'command format: \npython Leanote4MD.py import\npython Leanote4MD.py export'</span></div><div class="line"></div><div class="line">    logout()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_options</span><span class="params">()</span>:</span></div><div class="line">    parser = argparse.ArgumentParser()</div><div class="line">    parser.add_argument(<span class="string">"choice"</span>, choices=[<span class="string">"import"</span>, <span class="string">"export"</span>], help=<span class="string">"import or export"</span>)</div><div class="line">    parser.add_argument(<span class="string">"--host"</span>, dest=<span class="string">"host"</span>, help=<span class="string">"host(defalt:http://leanote.com)"</span>)</div><div class="line">    parser.add_argument(<span class="string">"-u"</span>, <span class="string">"--user"</span>, dest=<span class="string">"user"</span>, help=<span class="string">"email for login"</span>)</div><div class="line">    parser.add_argument(<span class="string">"-p"</span>, <span class="string">"--passwd"</span>, dest=<span class="string">"passwd"</span>,help=<span class="string">"passwd for login"</span>)</div><div class="line">    parser.add_argument(<span class="string">"--path"</span>, dest=<span class="string">"path"</span>, help=<span class="string">"your save path (default is current dir)"</span>)</div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    config_args = readconfig()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.host:</div><div class="line">        args.host = config_args.get(<span class="string">"host"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.user:</div><div class="line">        args.user = config_args.get(<span class="string">"email"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.passwd:</div><div class="line">        args.passwd = config_args.get(<span class="string">"passwd"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.path:</div><div class="line">        args.path = config_args.get(<span class="string">"path"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> DEBUG:</div><div class="line">        <span class="keyword">print</span> <span class="string">"choice:"</span>, args.choice</div><div class="line">        <span class="keyword">print</span> <span class="string">"host:"</span>, args.host</div><div class="line">        <span class="keyword">print</span> <span class="string">"user:"</span>,args.user</div><div class="line">        <span class="keyword">print</span> <span class="string">"passwd:"</span>,args.passwd</div><div class="line">        <span class="keyword">print</span> <span class="string">"path:"</span>, args.path</div><div class="line"></div><div class="line">    <span class="keyword">return</span> args</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readconfig</span><span class="params">()</span>:</span></div><div class="line">    args = &#123;&#125;</div><div class="line">    config = CP.ConfigParser()</div><div class="line">    config.read(configpath)</div><div class="line">    args[<span class="string">"host"</span>] = config.get(<span class="string">"conn"</span>, <span class="string">"host"</span>)</div><div class="line">    args[<span class="string">"email"</span>] = config.get(<span class="string">"conn"</span>, <span class="string">"email"</span>)</div><div class="line">    args[<span class="string">"passwd"</span>] = config.get(<span class="string">"conn"</span>, <span class="string">"passwd"</span>)</div><div class="line">    args[<span class="string">"path"</span>] = config.get(<span class="string">"conn"</span>, <span class="string">"path"</span>)</div><div class="line">    <span class="keyword">return</span> args</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    sys.exit(main())</div></pre></td></tr></table></figure>
</li>
<li><p>备份脚本说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#leanote导入导出MD工具</div><div class="line">- 可以把你储存在[Leanote](http://leanote.com)上的笔记、文章都导出成Markdown文件、文本文件</div><div class="line">- 也可以把你储存在硬盘的Markdown文件、文本文件都导入到[Leanote](http://leanote.com)上去</div><div class="line">- 目前支持导入导出含YAML格式的meta信息的文件，参照 [hexo](http://hexo.io/docs/front-matter.html)  的文件格式，也就是说文件头部可以有`title` `tags` </div><div class="line">`date` `categoris`等meta信息</div><div class="line">- 兼容官方网站，以及自建的服务器（基于beta4，以及API 0.1版本）</div><div class="line"></div><div class="line">#如何使用</div><div class="line">- 首先安装Python2版本</div><div class="line">- 确保机器已经安装 `requests` `Pillow` `PyYaml` `requests_toolbelt` 等模块，如果没装请 `pip install`</div><div class="line">- 然后在命令行执行`python leanote4MD.py`</div><div class="line">  - 如果报错，应该是你的 python 路径问题，或者缺少某些python module</div><div class="line">- 根据提示输入域名（默认是http://leanote.com）、用户邮箱、密码</div><div class="line">  - 域名不要忘记加`http://`</div><div class="line">  - 如果是自建服务器，请保证版本不低于 beta4</div><div class="line">  - 记得用邮箱，而不是用户名</div><div class="line">- 一般导入的错误都是文件没有严格按照YAML格式（多余空格等）造成的解析错误</div><div class="line"></div><div class="line"></div><div class="line">#功能</div><div class="line"></div><div class="line">- [x] 从Leanote导入、导出笔记本/子笔记本到MD或txt文本文件</div><div class="line">- [x] 保存为兼容 hexo front matter 的tag、category、date、title等</div><div class="line">  - 由于0.1版本API限制，导入时暂时无法设置 保存时间、修改时间</div><div class="line">- [x] 只导入、导出不在垃圾箱的笔记</div><div class="line">- [x] 数不尽的bug</div><div class="line">- [ ] 根据是否为已发布的blog，生成post或者draft属性</div><div class="line">- [x] 导出时保存图片到本地</div><div class="line">- [ ] 导入时提交图片到服务器</div></pre></td></tr></table></figure>
</li>
<li><p>备份脚本配置文件，原始备份脚本是交互式的，改为读取配置文件了</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat Leanote.cfg</div><div class="line">[conn]</div><div class="line">host = http://leanote.com</div><div class="line">email = charlie.cui@qq.com</div><div class="line">passwd = </div><div class="line">path = /opt/Leanote4MD/LeaNote_BackUp/</div></pre></td></tr></table></figure>
<ul>
<li><p>备份脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">more backupnote </div><div class="line">#!/bin/bash</div><div class="line">_work_dir=/opt/Leanote4MD</div><div class="line">_date=`date +%Y-%m-%d`</div><div class="line"></div><div class="line">backup() &#123;</div><div class="line">	mkdir -p $&#123;_work_dir&#125;/LeaNote_BackUp/$&#123;_date&#125;</div><div class="line">	cd _$&#123;_work_dir&#125;/LeaNote_BackUp</div><div class="line">	$&#123;_work_dir&#125;/Leanote4MD.py export |tee $LogFile</div><div class="line">	mv *.md $&#123;_date&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">clean()&#123;</div><div class="line">	find  $&#123;_work_dir&#125;/LeaNote_BackUp/ -type d -mtime +30 |xargs rm -fr</div><div class="line">&#125;</div><div class="line">backup &amp;&amp; clean</div></pre></td></tr></table></figure>
</li>
<li><p>增加cron，每天备份一次</p>
</li>
</ul>
<p><a href="http://ofc9x1ccn.bkt.clouddn.com/blog/Leanote4MD.py" target="_blank" rel="external">Leanote4MD.py</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为知笔记收费了，把笔记迁移到 leanote 上，但是有担心笔记的安全，所以找到了一个备份脚本，每天备份日志到本地。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;备份脚本&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
      <category term="Blog" scheme="http://czero000.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="http://czero000.github.io/tags/blog/"/>
    
      <category term="leanote" scheme="http://czero000.github.io/tags/leanote/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客显示部分内容</title>
    <link href="http://czero000.github.io/2016/11/17/github-pages-nodisplay-vendors.html"/>
    <id>http://czero000.github.io/2016/11/17/github-pages-nodisplay-vendors.html</id>
    <published>2016-11-17T03:49:46.000Z</published>
    <updated>2016-11-17T03:55:09.103Z</updated>
    
    <content type="html"><![CDATA[<p>今天更新 blog，一看全是空白，debug 结果全是 error,CSS 和 javascript都丢失了,显示<code>jquery，css</code> 都是 404。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib </div><div class="line">然后修改next底下所有引用source/vendors路径为source/lib。</div><div class="line">这些地方可以通过文件查找找出来。</div><div class="line">主要集中在这几个文件中。</div><div class="line">themes\.bowerrc </div><div class="line">themes\.gitignore </div><div class="line">themes\.javascript_ignore </div><div class="line">themes\bower.json 。</div><div class="line">修改完毕后，更新部署一遍就行了</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天更新 blog，一看全是空白，debug 结果全是 error,CSS 和 javascript都丢失了,显示&lt;code&gt;jquery，css&lt;/code&gt; 都是 404。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="Blog" scheme="http://czero000.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="http://czero000.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="http://czero000.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git基础</title>
    <link href="http://czero000.github.io/2016/11/17/Git-basic.html"/>
    <id>http://czero000.github.io/2016/11/17/Git-basic.html</id>
    <published>2016-11-17T02:24:36.000Z</published>
    <updated>2016-11-17T02:25:26.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h1><p>什么是版本控制</p>
<blockquote>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。</p>
</blockquote>
<h2 id="版本控制系统的变迁"><a href="#版本控制系统的变迁" class="headerlink" title="版本控制系统的变迁"></a>版本控制系统的变迁</h2><p>想要做好版本控制，少不了相应的系统，版本控制系统也经历了不少变迁</p>
<h3 id="原始"><a href="#原始" class="headerlink" title="原始"></a>原始</h3><p>本地版本控制系统: 用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。<br><img src="http://ofc9x1ccn.bkt.clouddn.com/git/local.png" alt="本地版本控制"></p>
<h3 id="进化"><a href="#进化" class="headerlink" title="进化"></a>进化</h3><p>集中化版本控制: 为了让不同开发者协同工作，<code>Centralized Version Control Systems</code>应运而生，诸如 <code>CVS、Subversion</code> 以及 <code>Perforce</code> 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/git/centralized.png" alt="集中版本控制"></p>
<p>缺点是服务器单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 如果磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据。</p>
<h3 id="究极进化"><a href="#究极进化" class="headerlink" title="究极进化"></a>究极进化</h3><p>分布式版本控制系统：为了解决本地版本控制的单点故障问题，<code>Distributed Version Control System</code> 便横空出世，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/git/distributed.png" alt="分布式版本控制"></p>
<p><code>Git</code> 不仅可以解决单点故障，还有离线提交、快速切换分支、方便合并、更少的仓库污染等特性。 在技术层面上，Git 绝对是一个无中心的分布式版本控制系统，但在管理层面上，我建议你保持一个中心版本库（Origin）<br><img src="http://ofc9x1ccn.bkt.clouddn.com/git/git-repo.jpg" alt="Git仓库"></p>
<h2 id="Git-简史"><a href="#Git-简史" class="headerlink" title="Git 简史"></a>Git 简史</h2><p>生活中的许多伟大事物一样，<code>Git</code> 诞生于一个极富纷争大举创新的年代。<code>Linux</code> 内核开源项目有着为数众广的参与者。 绝大多数的 <code>Linux</code> 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 <code>BitKeeper</code> 来管理和维护代码。到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 <code>Linux</code> 内核社区免费使用 <code>BitKeeper</code> 的权力。 这就迫使 <code>Linux</code> 开源社区（特别是 <code>Linux</code> 的缔造者 <code>Linux Torvalds</code>）基于使用 <code>BitKcheper</code> 时的经验教训，开发出自己的版本系统。</p>
<p>他们对新的系统制订了若干目标</p>
<ul>
<li>速度</li>
<li>简单的设计</li>
<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>
<li>完全分布式</li>
<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>
</ul>
<p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统</p>
<h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="直接记录快照，而非差异比较"><a href="#直接记录快照，而非差异比较" class="headerlink" title="直接记录快照，而非差异比较"></a>直接记录快照，而非差异比较</h3><p>与其他版本控制系统不同在于 <code>Git</code> 对待数据的方法。概念上来区分，其它大部分系统以文件变更列表的方式存储信息<br><img src="http://ofc9x1ccn.bkt.clouddn.com/git/deltas.png" alt="CVS" title="存储每个文件与初始版本的差异"><br><code>Git</code> 则不同于上面，<code>Git</code> 更像是把数据看做对小型文件系统的快照，每次你提交更新，或在 <code>Git</code> 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 如果文件没有修改，<code>Git</code> 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 <code>Git</code> 对待数据更像是<code>快照流</code>。<br><img src="http://ofc9x1ccn.bkt.clouddn.com/git/snapshots.png" alt="Git" title="存储项目随时间改变的快照"></p>
<h3 id="近乎所有操作都是本地操作"><a href="#近乎所有操作都是本地操作" class="headerlink" title="近乎所有操作都是本地操作"></a>近乎所有操作都是本地操作</h3><p>在 <code>Git</code> 中的绝大多数操作都只需要访问本地文件和资源，因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。</p>
<h3 id="Git-保持完整性"><a href="#Git-保持完整性" class="headerlink" title="Git 保持完整性"></a>Git 保持完整性</h3><p><code>Git</code> 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 <code>Git</code> 不知情时更改任何文件内容或目录内容。</p>
<h3 id="Git-一般只添加数据"><a href="#Git-一般只添加数据" class="headerlink" title="Git 一般只添加数据"></a>Git 一般只添加数据</h3><p>在执行的 Git 操作时，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。</p>
<h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><p><code>Git</code> 有三种状态，已提交（<code>committed</code>）、已修改（<code>modified</code>）和已暂存（<code>staged</code>）。- 工作区(<code>Workspace</code>)是计算机中项目的根目录</p>
<ul>
<li>工作区(Workspace)是计算机中项目的根目录</li>
<li>暂存区(Index)像个缓存区域，临时保存你的改动</li>
<li>版本库(Repository)分为本地仓库（Local)和远程仓库(Remote)<br>几乎所有常用命令就是围绕这几个概念来操作的，一图胜千言，下面是一张比较简单的图，包括了最基本的命令</li>
</ul>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/git/git-simple.png" alt="git-simple"></p>
<p>但只会使用以上命令是不够的，在这个复杂纷繁的程序世界，事情没你想的那么简单，不过有些事情想想就够了，不一定要去做，真要去做你也做不来，比如自己写个git来，但是，更多地的了解git是我们每个程序员都可以做得到的事。再看下图：<br><img src="http://ofc9x1ccn.bkt.clouddn.com/git/git-advance.jpg" alt="git-advance"></p>
<p>下面的命令结合上面两张图来理解、练习、记忆效果更加。暂时用不着的命令记不住，不理解也没关系，哪天遇到问题，再来找找有没有合适的方法也不迟。</p>
<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><h3 id="新建-克隆代码库"><a href="#新建-克隆代码库" class="headerlink" title="新建/克隆代码库"></a>新建/克隆代码库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init                                            # 当前目录新建一个Git代码库</div><div class="line">git init [project-name]                             # 新建一个目录，将其初始化为Git代码库</div><div class="line">git init --bare [project-name]                      # 创建远程仓库</div><div class="line">git clone /path/to/repository                       # 克隆本地仓库和它的整个代码历史</div><div class="line">git clone username@host:/path/to/repository         # 克隆远端仓库</div><div class="line">git fetch [url]                                     # 下载/同步项目到</div></pre></td></tr></table></figure>
<h3 id="添加-删除文件"><a href="#添加-删除文件" class="headerlink" title="添加/删除文件"></a>添加/删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git add [file1] [file2] ...                         # 添加指定文件到暂存区</div><div class="line">git add [dir]                                       # 添加指定目录到暂存区，包括子目录</div><div class="line">git add .                                           # 添加当前目录的所有文件到暂存区</div><div class="line">git rm [file1] [file2] ...                          # 删除工作区文件，并且将这次删除放入暂存区</div><div class="line">git rm --cached [file]                              # 停止追踪指定文件，但该文件会保留在工作区</div><div class="line">git mv [file-original] [file-renamed]               # 改名文件，并且将这个改名放入暂存区</div></pre></td></tr></table></figure>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git commit -m [message]                             # 提交暂存区所有文件到仓库区，并指定提交说明</div><div class="line">git commit [file1] [file2] ... -m [message]         # 提交暂存区的指定文件到仓库区，并指定提交说明</div><div class="line">git commit -a                                       # 提交工作区自上次commit之后的变化，直接到仓库区。是git add 和 git commit的组合操作</div><div class="line">git commit -v                                       # 提交时显示所有diff信息</div><div class="line">git commit --amend -m [message]                     # 使用一次新的commit，替代上一次提交</div></pre></td></tr></table></figure>
<h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git branch                                          # 列出所有本地分支</div><div class="line">git branch -r                                       # 列出所有远程分支</div><div class="line">git branch -a                                       # 列出所有本地分支和远程分支</div><div class="line">git branch [branch-name]                            # 新建一个分支，但依然停留在当前分支</div><div class="line">git checkout -b [branch]                            # 新建一个分支，并切换到该分支</div><div class="line">git branch [branch] [commit]                        # 新建一个分支，指向指定commit</div><div class="line">git checkout [branch-name]                          # 切换到指定分支</div><div class="line">git merge [branch]                                  # 合并指定分支到当前分支</div><div class="line">git branch -d [branch-name]                         # 删除本地分支</div><div class="line">git push origin --delete [branch-name]              # 方法一：删除远程分支</div><div class="line">git branch -dr [remote/branch]                      # 方法二：删除远程分支</div></pre></td></tr></table></figure>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git checkout [file]                                 # 恢复暂存区的指定文件到工作区（注意区别分支操作中得checkout命令）</div><div class="line">git checkout [commit] [file]                        # 恢复某个commit的指定文件到暂存区和工作区</div><div class="line">git checkout .                                      # 恢复暂存区的所有文件到工作区</div><div class="line">git reset [file]                                    # 重置暂存区的指定文件，与最新的commit保持一致，但工作区不变</div><div class="line">git reset --hard                                    # 重置暂存区与工作区，与最新的commit保持一致</div><div class="line">git reset [commit]                                  # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</div><div class="line">git reset --hard [commit]                           # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line">git reset --keep [commit]                           # 重置当前HEAD为指定commit，但保持暂存区和工作区不变</div><div class="line">git revert [commit]                                 # 新建一个commit，用来撤销指定commit</div></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git tag                                             # 列出所有tag</div><div class="line">git tag [tag]                                       # 在当前commit新建一个tag</div><div class="line">git tag [tag] [commit]                              # 在指定commit新建一个tag</div><div class="line">git tag -d [tag]                                    # 删除本地tag</div><div class="line">git push origin :refs/tags/[tagName]                # 删除远程tag</div><div class="line">git show [tag]                                      # 查看tag信息</div><div class="line">git push [remote] [tag]                             # 提交指定tag</div><div class="line">git push [remote] --tags                            # 提交所有tag</div><div class="line">git checkout -b [branch] [tag]                      # 新建一个分支，指向某个tag</div></pre></td></tr></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git status                                          # 显示所有变更文件</div><div class="line">git log                                             # 显示当前分支的版本历史</div><div class="line">git log --stat                                      # 显示当前分支的版本历史，以及发生变更的文件</div><div class="line">git blame [file]                                    # 显示指定文件是什么人在什么时间修改过</div><div class="line">git log -p [file]                                   # 显示指定文件相关的每一次diff</div><div class="line">git diff                                            # 显示暂存区和工作区的差异</div><div class="line">git diff --cached [commit]                          # 显示暂存区和某个commit的差异</div><div class="line">git diff HEAD                                       # 显示工作区与当前分支最新commit之间的差异</div><div class="line">git show [commit]                                   # 显示某次提交的元数据和内容变化</div><div class="line">git show --name-only [commit]                       # 显示某次提交发生变化的文件</div><div class="line">git show [commit]:[filename]                        # 显示某次提交时，某个文件的内容</div><div class="line">git reflog                                          # 显示当前分支的最近几次提交</div></pre></td></tr></table></figure>
<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git fetch [remote]                                  # 下载远程仓库的所有变动到暂存区</div><div class="line">git remote -v                                       # 显示所有远程仓库</div><div class="line">git remote show [remote]                            # 显示某个远程仓库的信息</div><div class="line">git remote add [shortname] [url]                    # 增加一个新的远程仓库，并命名</div><div class="line">git pull [remote] [branch]                          # 取回远程仓库的变化，并与本地分支合并</div><div class="line">git push [remote] [branch]                          # 上传本地指定分支到远程仓库</div><div class="line">git push [remote] --force                           # 即使有冲突，强行推送当前分支到远程仓库</div><div class="line">git push [remote] --all                             # 推送所有分支到远程仓库</div></pre></td></tr></table></figure>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>git</code> 的配置文件是<code>.gitconfig</code>，支持全局配置和项目配置，全部配置对所有项目有效，用 <code>--global</code>选择指定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git config --list                                   # 显示配置</div><div class="line">git config -e [--global]                            # 编辑(全局)配置文件</div><div class="line">git config [--global] user.name &quot;xx&quot;                # 设置 commit 的用户</div><div class="line">git config [--global] user.email &quot;xx@xx.com&quot;        # 设置 commit 的邮箱</div><div class="line">gitk                                                # 内建的图形化 git</div><div class="line">git config color.ui true                            # 彩色的 git 输出</div><div class="line">git config format.pretty oneline                    # 显示历史记录时，只显示一行注释信息</div><div class="line">git add -i                                          # 交互的添加文件至缓存区</div></pre></td></tr></table></figure></p>
<p>参考资料:</p>
<p><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">git-简易指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于版本控制&quot;&gt;&lt;a href=&quot;#关于版本控制&quot; class=&quot;headerlink&quot; title=&quot;关于版本控制&quot;&gt;&lt;/a&gt;关于版本控制&lt;/h1&gt;&lt;p&gt;什么是版本控制&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版本控制是一种记录一个或若干文件内容变化，以便将来查
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
      <category term="Git" scheme="http://czero000.github.io/categories/System/Git/"/>
    
    
      <category term="Git" scheme="http://czero000.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用ansible管理windows主机</title>
    <link href="http://czero000.github.io/2016/10/26/ansible-managment-windows.html"/>
    <id>http://czero000.github.io/2016/10/26/ansible-managment-windows.html</id>
    <published>2016-10-26T04:01:09.000Z</published>
    <updated>2016-10-26T04:22:06.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows下Ansible工作原理"><a href="#Windows下Ansible工作原理" class="headerlink" title="Windows下Ansible工作原理"></a>Windows下Ansible工作原理</h1><p>Ansible 从 1.7+ 版本开始支持 Windows，但前提是管理机必须为 Linux 系统，远程主机的通信方式也由 SSH 变更为 PowerShell，基于 Kerberos 认证方式，同时管理机必须预安装Python 的 Winrm 模块，方可和远程 Windows 主机正常通信，但 PowerShell 需 3.0+ 版本且 <code>Management Framework 3.0+</code>版本，实测 <code>Windows 7 SP1</code> 和<code>Windows Server 2008 R2</code>及以上版本系统经简单配置可正常与 Ansible 通信。简单总结如下：</p>
<ul>
<li>管理机必须为 Linux系统且需预安装 Python Winrm 模块</li>
<li>底层通信基于 PowerShell，认证基于 Kerberos</li>
<li>远程主机 PowerShell 版本为3.0+，Management Framework 版本为3.0+。</li>
</ul>
<p>如上条件满足后，方可正常和Ansible通信。</p>
<h2 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h2><ul>
<li>管理主机: 172.16.8.247 操作系统: Ubuntu16.04</li>
<li>被控主机: 172.16.11.176 操作系统: Windows2008_R2_64</li>
</ul>
<h2 id="配置管理主机"><a href="#配置管理主机" class="headerlink" title="配置管理主机"></a>配置管理主机</h2><h3 id="安装-winrm-模块"><a href="#安装-winrm-模块" class="headerlink" title="安装 winrm 模块"></a>安装 winrm 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install python-pip</div><div class="line">pip install &quot;pywinrm&gt;=0.1.1&quot;</div></pre></td></tr></table></figure>
<h3 id="动态目录的支持"><a href="#动态目录的支持" class="headerlink" title="动态目录的支持"></a>动态目录的支持</h3><p>如果 windows 主机是通过 活动目录的管理方式，管理机和被管理机基于 <code>kerbero</code>认证，需要安装 <code>python-kerbero</code> 和 <code>MIT krb5</code> 依赖库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install python-dev libkrb5-dev</div><div class="line">pip install Kerberos</div></pre></td></tr></table></figure>
<p>配置 Kerberos，在<code>/etc/krb5.conf</code>添加下面配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[realms]</div><div class="line"> MY.DOMAIN.COM = &#123;</div><div class="line">  kdc = domain-controller1.my.domain.com</div><div class="line">  kdc = domain-controller2.my.domain.com</div><div class="line"> &#125;</div><div class="line"> [domain_realm]</div><div class="line">    .my.domain.com = MY.DOMAIN.COM</div></pre></td></tr></table></figure></p>
<p>验证域账号认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kinit user@My.DOAMIN.COM</div></pre></td></tr></table></figure></p>
<h3 id="配置-inventory-主机信息和group-vars-windows-yml变量信息"><a href="#配置-inventory-主机信息和group-vars-windows-yml变量信息" class="headerlink" title="配置 inventory 主机信息和group_vars/windows.yml变量信息"></a>配置 inventory 主机信息和<code>group_vars/windows.yml</code>变量信息</h3><ul>
<li>inventory</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[windows]    </div><div class="line">172.16.11.176</div></pre></td></tr></table></figure>
<ul>
<li>group_vars</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">windows.yml</div><div class="line">ansible_ssh_user: Administrator</div><div class="line">ansible_ssh_password: 密码                                                                                                                                </div><div class="line">ansible_ssh_port: 5986        </div><div class="line">ansible_connection: winrm</div><div class="line">ansible_winrm_server_cert_validation: ignore</div></pre></td></tr></table></figure>
<p>这里的 ssh_port 不是真正的SSH协议的端口</p>
<h2 id="被控主机-Windows2008-R2-64"><a href="#被控主机-Windows2008-R2-64" class="headerlink" title="被控主机 (Windows2008_R2_64)"></a>被控主机 (Windows2008_R2_64)</h2><p>和 Linux 发版版稍有区别，远程主机为 Windows 需预先如下配置</p>
<ul>
<li>安装Framework 3.0+</li>
<li>设置PowerShell本地脚本运行权限为remotesigned</li>
<li>升级PowerShell至3.0+</li>
<li>自动设置Windows远端管理，英文全称WS-Management（WinRM）</li>
</ul>
<h3 id="安装-Framework-3-0"><a href="#安装-Framework-3-0" class="headerlink" title="安装 Framework 3.0+"></a>安装 Framework 3.0+</h3><p>如果系统已经安装可以忽略</p>
<h3 id="设置-PowerShell-本地脚本运行权限为-remotesigned"><a href="#设置-PowerShell-本地脚本运行权限为-remotesigned" class="headerlink" title="设置 PowerShell 本地脚本运行权限为 remotesigned"></a>设置 PowerShell 本地脚本运行权限为 remotesigned</h3><p>Windows 系统默认不允许非 Adminitor 外的普通用户执行 SP 脚本，即使是管理员，如下开放 SP 脚本执行权限。</p>
<ul>
<li>在 cmd 中执行 regedit.exe 打开注册表，在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell</code>新建字符串值名为<code>ExecutionPolicy</code>，值为<code>remotesigned</code> <strong>或者</strong>，打开 PowerShell 执行命令：<code>set-executionpolicy -executionpolicy unrestricted</code></li>
</ul>
<p>这里共4种权限：</p>
<ul>
<li>Restricted—默认的设置， 不允许任何script运行；</li>
<li>AllSigned—只能运行经过数字证书签名的script；</li>
<li>RemoteSigned—运行本地的script不需要数字签名，但是运行从网络上下载的script就必须要有数字签名；</li>
<li>Unrestricted—允许所有的script运行。</li>
</ul>
<h3 id="升级-powershell至3-0"><a href="#升级-powershell至3-0" class="headerlink" title="升级 powershell至3.0+"></a>升级 powershell至3.0+</h3><p><code>PowerShell 3.0+ ``需基于</code>Windows 7 Sp1<code>安装，Windows7 系统 Sp1 补丁升级请参考 http://windows.microsoft.com/installwindows7sp1。</code>Window 7 和 <code>Windows Server 2008 R2</code>默认安装的有 PowerShell，但版本号一般为<code>2.0</code>版本，所以我们需升级至3.0+，如下图中数字1部分表示PowerShell版本过低需3.0+版本，数字2部分表示当前PowerShell版本为2.0</p>
<ul>
<li>查询 powershell 版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//在cmd中执行命令进入powershell</div><div class="line">powershell</div><div class="line">// 检查powershell版本</div><div class="line">Get-Host</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/ansible/powershell_version.png" alt="powershell_version"></p>
<ul>
<li>升级 powershell</li>
</ul>
<p><a href="https://codeload.github.com/cchurch/ansible/zip/devel" target="_blank" rel="external">下载</a>或者<a href="https://github.com/cchurch/ansible.git" target="_blank" rel="external">克隆</a>升级脚本</p>
<p>选择使用 powershell 执行<code>ansible-devel\examples\scripts\upgrade_to_ps3</code> 脚本，执行后重启服务器，再次检查 powershell 版本。</p>
<p><img src="http://ofc9x1ccn.bkt.clouddn.com/ansible/powershell_version3.png" alt="powershell_version3"></p>
<ul>
<li>设置Windows远端管理（WS-Management，WinRM）</li>
</ul>
<p>选择使用 powershell 执行<code>ansible-devel\examples\scripts\ConfigureRemotingForAnsible.ps1</code> 脚本,执行结果没有返回值即为正常。如执行出现“由于此计算机上的网络连接类型之一设置为公用，因此 WinRM 防火墙例外将不运行”类似报错，请在 PowerShell 中执行命令 Enable-PSRemoting – SkipNetworkProfileCheck –Force 尝试解决。</p>
<h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><ul>
<li>验证连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">curl -vk -d &quot; &quot; -u &quot;administrator:passowrd&quot; https://172.16.11.176:5986/wsman</div><div class="line">*   Trying 172.16.11.176...</div><div class="line">* Connected to 172.16.11.176 (172.16.11.176) port 5986 (#0)</div><div class="line">* found 173 certificates in /etc/ssl/certs/ca-certificates.crt</div><div class="line">* found 694 certificates in /etc/ssl/certs</div><div class="line">* ALPN, offering http/1.1</div><div class="line">* SSL connection using TLS1.0 / RSA_AES_128_CBC_SHA1</div><div class="line">*        server certificate verification SKIPPED</div><div class="line">*        server certificate status verification SKIPPED</div><div class="line">*        common name: WIN-J33CVNTPJ41 (does not match &apos;172.16.11.176&apos;)</div><div class="line">*        server certificate expiration date OK</div><div class="line">*        server certificate activation date OK</div><div class="line">*        certificate public key: RSA</div><div class="line">*        certificate version: #3</div><div class="line">*        subject: CN=WIN-J33CVNTPJ41</div><div class="line">*        start date: Mon, 24 Oct 2016 22:26:13 GMT</div><div class="line">*        expire date: Tue, 24 Oct 2017 22:26:13 GMT</div><div class="line">*        issuer: CN=WIN-J33CVNTPJ41</div><div class="line">*        compression: NULL</div><div class="line">* ALPN, server did not agree to a protocol</div><div class="line">* Server auth using Basic with user &apos;administrator&apos;</div><div class="line">&gt; POST /wsman HTTP/1.1</div><div class="line">&gt; Host: 172.16.11.176:5986</div><div class="line">&gt; Authorization: Basic YWRtaW5pc3RyYXRvcjo4cWw2LHloWQ==</div><div class="line">&gt; User-Agent: curl/7.47.0</div><div class="line">&gt; Accept: */*</div><div class="line">&gt; Content-Length: 1</div><div class="line">&gt; Content-Type: application/x-www-form-urlencoded</div><div class="line">&gt;</div><div class="line">* upload completely sent off: 1 out of 1 bytes</div><div class="line">&lt; HTTP/1.1 415</div><div class="line">&lt; Server: Microsoft-HTTPAPI/2.0</div><div class="line">&lt; Date: Wed, 26 Oct 2016 04:19:36 GMT</div><div class="line">&lt; Connection: close</div><div class="line">&lt; Content-Length: 0</div><div class="line">&lt;</div><div class="line">* Closing connection 0</div></pre></td></tr></table></figure>
<ul>
<li>在 linux 控制主机上执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ansible windows -m win_ping</div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">ansible windows -m setup</div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;ansible_facts&quot;: &#123;</div><div class="line">        &quot;ansible_architecture&quot;: &quot;64-bit&quot;,</div><div class="line">        &quot;ansible_date_time&quot;: &#123;</div><div class="line">            &quot;date&quot;: &quot;2016/10/25&quot;,</div><div class="line">            &quot;day&quot;: &quot;25&quot;,</div><div class="line">            &quot;hour&quot;: &quot;23&quot;,</div><div class="line">            &quot;iso8601&quot;: &quot;2016-10-25T23:21:26&quot;,</div><div class="line">            &quot;minute&quot;: &quot;21&quot;,</div><div class="line">            &quot;month&quot;: &quot;10&quot;,</div><div class="line">            &quot;year&quot;: &quot;2016&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ansible_distribution&quot;: &quot;Microsoft Windows NT 6.1.7601 Service Pack 1&quot;,</div><div class="line">        &quot;ansible_distribution_version&quot;: &quot;6.1.7601.65536&quot;,</div><div class="line">        &quot;ansible_env&quot;: &#123;</div><div class="line">            &quot;ALLUSERSPROFILE&quot;: &quot;C:\\ProgramData&quot;,</div><div class="line">            &quot;APPDATA&quot;: &quot;C:\\Users\\Administrator\\AppData\\Roaming&quot;,</div><div class="line">            &quot;COMPUTERNAME&quot;: &quot;WIN-J33CVNTPJ41&quot;,</div><div class="line">            &quot;ComSpec&quot;: &quot;C:\\Windows\\system32\\cmd.exe&quot;,</div><div class="line">            &quot;CommonProgramFiles&quot;: &quot;C:\\Program Files\\Common Files&quot;,</div><div class="line">            &quot;CommonProgramFiles(x86)&quot;: &quot;C:\\Program Files (x86)\\Common Files&quot;,</div><div class="line">            &quot;CommonProgramW6432&quot;: &quot;C:\\Program Files\\Common Files&quot;,</div><div class="line">            &quot;FP_NO_HOST_CHECK&quot;: &quot;NO&quot;,</div><div class="line">            &quot;HOMEDRIVE&quot;: &quot;C:&quot;,</div><div class="line">            &quot;HOMEPATH&quot;: &quot;\\Users\\Administrator&quot;,</div><div class="line">            &quot;LOCALAPPDATA&quot;: &quot;C:\\Users\\Administrator\\AppData\\Local&quot;,</div><div class="line">            &quot;LOGONSERVER&quot;: &quot;\\\\WIN-J33CVNTPJ41&quot;,</div><div class="line">            &quot;MODULE_COMPLEX_ARGS&quot;: &quot;&#123;\&quot;_ansible_version\&quot;: \&quot;2.1.2.0\&quot;, \&quot;_ansible_selinux_special_fs\&quot;: [\&quot;fuse\&quot;, \&quot;nfs\&quot;, \&quot;vboxsf\&quot;, \&quot;ramfs\&quot;], \&quot;_ansible_no_log\&quot;: false, \&quot;_ansible_verbosity\&quot;: 0, \&quot;_ansible_syslog_facility\&quot;: \&quot;LOG_USER\&quot;, \&quot;_ansible_diff\&quot;: false, \&quot;_ansible_debug\&quot;: false, \&quot;_ansible_check_mode\&quot;: false&#125;&quot;,</div><div class="line">            &quot;NUMBER_OF_PROCESSORS&quot;: &quot;4&quot;,</div><div class="line">            &quot;OS&quot;: &quot;Windows_NT&quot;,</div><div class="line">            &quot;PATHEXT&quot;: &quot;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL&quot;,</div><div class="line">            &quot;PROCESSOR_ARCHITECTURE&quot;: &quot;AMD64&quot;,</div><div class="line">            &quot;PROCESSOR_IDENTIFIER&quot;: &quot;Intel64 Family 6 Model 13 Stepping 3, GenuineIntel&quot;,</div><div class="line">            &quot;PROCESSOR_LEVEL&quot;: &quot;6&quot;,</div><div class="line">            &quot;PROCESSOR_REVISION&quot;: &quot;0d03&quot;,</div><div class="line">            &quot;PROMPT&quot;: &quot;$P$G&quot;,</div><div class="line">            &quot;PSExecutionPolicyPreference&quot;: &quot;Unrestricted&quot;,</div><div class="line">            &quot;PSModulePath&quot;: &quot;C:\\Users\\Administrator\\Documents\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules&quot;,</div><div class="line">            &quot;PUBLIC&quot;: &quot;C:\\Users\\Public&quot;,</div><div class="line">            &quot;Path&quot;: &quot;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0&quot;,</div><div class="line">            &quot;ProgramData&quot;: &quot;C:\\ProgramData&quot;,</div><div class="line">            &quot;ProgramFiles&quot;: &quot;C:\\Program Files&quot;,</div><div class="line">            &quot;ProgramFiles(x86)&quot;: &quot;C:\\Program Files (x86)&quot;,</div><div class="line">            &quot;ProgramW6432&quot;: &quot;C:\\Program Files&quot;,</div><div class="line">            &quot;SystemDrive&quot;: &quot;C:&quot;,</div><div class="line">            &quot;SystemRoot&quot;: &quot;C:\\Windows&quot;,</div><div class="line">            &quot;TEMP&quot;: &quot;C:\\Users\\ADMINI~1\\AppData\\Local\\Temp&quot;,</div><div class="line">            &quot;TMP&quot;: &quot;C:\\Users\\ADMINI~1\\AppData\\Local\\Temp&quot;,</div><div class="line">            &quot;USERDOMAIN&quot;: &quot;WIN-J33CVNTPJ41&quot;,</div><div class="line">            &quot;USERNAME&quot;: &quot;Administrator&quot;,</div><div class="line">            &quot;USERPROFILE&quot;: &quot;C:\\Users\\Administrator&quot;,</div><div class="line">            &quot;windir&quot;: &quot;C:\\Windows&quot;,</div><div class="line">            &quot;windows_tracing_flags&quot;: &quot;3&quot;,</div><div class="line">            &quot;windows_tracing_logfile&quot;: &quot;C:\\BVTBin\\Tests\\installpackage\\csilogfile.log&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;ansible_fqdn&quot;: &quot;WIN-J33CVNTPJ41&quot;,</div><div class="line">        &quot;ansible_hostname&quot;: &quot;WIN-J33CVNTPJ41&quot;,</div><div class="line">        &quot;ansible_interfaces&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;default_gateway&quot;: &quot;42.62.9.1&quot;,</div><div class="line">                &quot;dns_domain&quot;: null,</div><div class="line">                &quot;interface_index&quot;: 11,</div><div class="line">                &quot;interface_name&quot;: &quot;Intel(R) PRO/1000 MT Network Connection&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;default_gateway&quot;: null,</div><div class="line">                &quot;dns_domain&quot;: null,</div><div class="line">                &quot;interface_index&quot;: 12,</div><div class="line">                &quot;interface_name&quot;: &quot;Intel(R) PRO/1000 MT Network Connection #2&quot;</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        &quot;ansible_ip_addresses&quot;: [</div><div class="line">            &quot;42.62.9.176&quot;,</div><div class="line">            &quot;fe80::cd71:a280:1406:de71&quot;,</div><div class="line">            &quot;172.16.11.176&quot;,</div><div class="line">            &quot;fe80::304d:48c:4d4f:67d9&quot;</div><div class="line">        ],</div><div class="line">        &quot;ansible_lastboot&quot;: &quot;2016-10-25 22:15:20Z&quot;,</div><div class="line">        &quot;ansible_os_family&quot;: &quot;Windows&quot;,</div><div class="line">        &quot;ansible_os_name&quot;: &quot;Microsoft Windows Server 2008 R2 Enterprise&quot;,</div><div class="line">        &quot;ansible_powershell_version&quot;: 3,</div><div class="line">        &quot;ansible_system&quot;: &quot;Win32NT&quot;,</div><div class="line">        &quot;ansible_totalmem&quot;: 8589524992,</div><div class="line">        &quot;ansible_uptime_seconds&quot;: 3966,</div><div class="line">        &quot;ansible_win_rm_certificate_expires&quot;: &quot;2017-10-24 18:26:13&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;changed&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="windows-下可用的模块"><a href="#windows-下可用的模块" class="headerlink" title="windows 下可用的模块"></a>windows 下可用的模块</h2><p>与 linux 系统相比， windows 下可以使用的模块就很少了，下面是常用的一些模块</p>
<ul>
<li>scripts,raw,slurp,setup模块在Windows 下可正常使用</li>
<li>win_acl (E) —设置文件/目录属主属组权限</li>
<li>win_copy—拷贝文件到远程Windows主机</li>
<li>win_file —创建，删除文件或目录</li>
<li>win_lineinfile—匹配替换文件内容</li>
<li>win_package (E) —安装/卸载本地或网络软件包</li>
<li>win_ping —Windows系统下的ping模块，常用来测试主机是否存活</li>
<li>win_service—管理Windows Services服务</li>
<li>win_user —管理Windows本地用户</li>
</ul>
<p>更多模块介绍可以参考 <a href="http://docs.ansible.com/ansible/list_of_windows_modules.html" target="_blank" rel="external">ansible官网模块页面</a></p>
<h2 id="windows-ansible-模块实践"><a href="#windows-ansible-模块实践" class="headerlink" title="windows ansible 模块实践"></a>windows ansible 模块实践</h2><h3 id="传输文件到指定目录"><a href="#传输文件到指定目录" class="headerlink" title="传输文件到指定目录"></a>传输文件到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ansible windows -m win_copy -a &apos;src=/root/windows/files/helloworld.ps1 dest=C:\\files\\helloworld.ps1&apos;   </div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;checksum&quot;: &quot;e53fa06a2ab5313165632e7c99a04af587cc6b47&quot;,</div><div class="line">    &quot;operation&quot;: &quot;file_copy&quot;,</div><div class="line">    &quot;original_basename&quot;: &quot;helloworld.ps1&quot;,</div><div class="line">    &quot;size&quot;: 112</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除指定文件"><a href="#删除指定文件" class="headerlink" title="删除指定文件"></a>删除指定文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ansible windows -m win_file -a &apos;path=c:\\files\\helloworld.sp1 state=absent&apos;</div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行远程脚本"><a href="#执行远程脚本" class="headerlink" title="执行远程脚本"></a>执行远程脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ansible windows -m script -a &apos;/root/windows/files/helloworld.ps1&apos;</div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;rc&quot;: 0,</div><div class="line">    &quot;stderr&quot;: &quot;&quot;,</div><div class="line">    &quot;stdout&quot;: &quot;\nHello World!\nGood-bye World! \n\n&quot;,</div><div class="line">    &quot;stdout_lines&quot;: [</div><div class="line">        &quot;&quot;,</div><div class="line">        &quot;Hello World!&quot;,</div><div class="line">        &quot;Good-bye World! &quot;,</div><div class="line">        &quot;&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ansible windows -m win_user -a &apos;name=Czero password=Line.kong group=Administrators&apos;   </div><div class="line">172.16.11.176 | SUCCESS =&gt; &#123;</div><div class="line">   &quot;account_disabled&quot;: false,</div><div class="line">   &quot;account_locked&quot;: false,</div><div class="line">   &quot;changed&quot;: true,</div><div class="line">   &quot;description&quot;: &quot;&quot;,</div><div class="line">   &quot;fullname&quot;: &quot;Czero&quot;,</div><div class="line">   &quot;groups&quot;: [],</div><div class="line">   &quot;name&quot;: &quot;Czero&quot;, </div><div class="line">   &quot;password_expired&quot;: false,</div><div class="line">   &quot;password_never_expires&quot;: false,</div><div class="line">   &quot;path&quot;: &quot;WinNT://WORKGROUP/WIN-J33CVNTPJ41/Czero&quot;,</div><div class="line">   &quot;sid&quot;: &quot;S-1-5-21-459422901-1284336649-1347501021-1002&quot;,</div><div class="line">   &quot;state&quot;: &quot;present&quot;,</div><div class="line">   &quot;user_cannot_change_password&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><ul>
<li>copy 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">vim copy.yml</div><div class="line">---                                                                   </div><div class="line">- name: copy file on windows                                          </div><div class="line">  hosts: windows                                                      </div><div class="line">  tasks:                                                              </div><div class="line">    - name: copy file on remote windows                               </div><div class="line">      win_file: src=/root/windows/files/helloworld.ps1 dest=c:\\files\\helloworld.ps1</div><div class="line"></div><div class="line">ansible-playbook copy.yml</div><div class="line"></div><div class="line">PLAY [copy file on windows] ****************************************************</div><div class="line"></div><div class="line">TASK [setup] *******************************************************************</div><div class="line">Wednesday 26 October 2016  11:38:27 +0800 (0:00:00.038)       0:00:00.038 *****</div><div class="line">ok: [172.16.11.176]</div><div class="line"></div><div class="line">TASK [copy file on remote windows] *********************************************</div><div class="line">Wednesday 26 October 2016  11:38:31 +0800 (0:00:04.071)       0:00:04.110 *****</div><div class="line">ok: [172.16.11.176]</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line"></div><div class="line">172.16.11.176              : ok=2    changed=0    unreachable=0    failed=0   </div><div class="line">Wednesday 26 October 2016  11:38:33 +0800 (0:00:02.329)       0:00:06.439 *****</div><div class="line">===============================================================================</div><div class="line">setup ------------------------------------------------------------------- 4.07s</div><div class="line">copy file on remote windows --------------------------------------------- 2.33s</div></pre></td></tr></table></figure>
<ul>
<li>执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">vim test_raw.yml</div><div class="line">- name: test raw module  </div><div class="line">  hosts: windows         </div><div class="line">  tasks:                 </div><div class="line">    - name: run ipconfig</div><div class="line">      raw: ipconfig      </div><div class="line">      register: ipconfig</div><div class="line">    - debug: var=ipconfig        </div><div class="line"></div><div class="line">ansible-playbook test_raw.yml</div><div class="line"></div><div class="line">PLAY [test raw module] *********************************************************</div><div class="line"></div><div class="line">TASK [setup] *******************************************************************</div><div class="line">Wednesday 26 October 2016  11:45:30 +0800 (0:00:00.037)       0:00:00.037 *****</div><div class="line">ok: [172.16.11.176]</div><div class="line"></div><div class="line">TASK [run ipconfig] ************************************************************</div><div class="line">Wednesday 26 October 2016  11:45:34 +0800 (0:00:04.076)       0:00:04.114 *****</div><div class="line">ok: [172.16.11.176]</div><div class="line"></div><div class="line">TASK [debug] *******************************************************************</div><div class="line">Wednesday 26 October 2016  11:45:35 +0800 (0:00:00.688)       0:00:04.803 *****</div><div class="line">ok: [172.16.11.176] =&gt; &#123;</div><div class="line">    &quot;ipconfig&quot;: &#123;</div><div class="line">        &quot;changed&quot;: false,</div><div class="line">        &quot;rc&quot;: 0,</div><div class="line">        &quot;stderr&quot;: &quot;&quot;,</div><div class="line">        &quot;stdout&quot;: &quot;\r\nWindows IP Configuration\r\n\r\n\r\nEthernet adapter �������� 2:\r\n\r\n   Connection-specific DNS Suffix  . : \r\n   Link-local IPv6 Address . . . . . : fe80::304d:48c:4d4f:67d9%12\r\n   IPv4 Address. . . . . . . . . . . : 172.16.11.176\r\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\r\n   Default Gateway . . . . . . . . . : \r\n\r\nEthernet adapter ��������:\r\n\r\n   Connection-specific DNS Suffix  . : \r\n   Link-local IPv6 Address . . . . . : fe80::cd71:a280:1406:de71%11\r\n   IPv4 Address. . . . . . . . . . . : 42.62.9.176\r\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\r\n   Default Gateway . . . . . . . . . : 42.62.9.1\r\n\r\nTunnel adapter isatap.&#123;9ED2F327-7AD8-488B-9D74-F8E3E8B5E2B1&#125;:\r\n\r\n   Media State . . . . . . . . . . . : Media disconnected\r\n   Connection-specific DNS Suffix  . : \r\n\r\nTunnel adapter isatap.&#123;AB02B80C-75A3-4F59-B19B-8AE4F8103DF8&#125;:\r\n\r\n   Media State . . . . . . . . . . . : Media disconnected\r\n   Connection-specific DNS Suffix  . : \r\n\r\nTunnel adapter 6TO4 Adapter:\r\n\r\n   Connection-specific DNS Suffix  . : \r\n   IPv6 Address. . . . . . . . . . . : 2002:2a3e:9b0::2a3e:9b0\r\n   Default Gateway . . . . . . . . . : \r\n&quot;,</div><div class="line">        &quot;stdout_lines&quot;: [</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Windows IP Configuration&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Ethernet adapter �������� 2:&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;   Connection-specific DNS Suffix  . : &quot;,</div><div class="line">            &quot;   Link-local IPv6 Address . . . . . : fe80::304d:48c:4d4f:67d9%12&quot;,</div><div class="line">            &quot;   IPv4 Address. . . . . . . . . . . : 172.16.11.176&quot;,</div><div class="line">            &quot;   Subnet Mask . . . . . . . . . . . : 255.255.255.0&quot;,</div><div class="line">            &quot;   Default Gateway . . . . . . . . . : &quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Ethernet adapter ��������:&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;   Connection-specific DNS Suffix  . : &quot;,</div><div class="line">            &quot;   Link-local IPv6 Address . . . . . : fe80::cd71:a280:1406:de71%11&quot;,</div><div class="line">            &quot;   IPv4 Address. . . . . . . . . . . : 42.62.9.176&quot;,</div><div class="line">            &quot;   Subnet Mask . . . . . . . . . . . : 255.255.255.0&quot;,</div><div class="line">            &quot;   Default Gateway . . . . . . . . . : 42.62.9.1&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Tunnel adapter isatap.&#123;9ED2F327-7AD8-488B-9D74-F8E3E8B5E2B1&#125;:&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;   Media State . . . . . . . . . . . : Media disconnected&quot;,</div><div class="line">            &quot;   Connection-specific DNS Suffix  . : &quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Tunnel adapter isatap.&#123;AB02B80C-75A3-4F59-B19B-8AE4F8103DF8&#125;:&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;   Media State . . . . . . . . . . . : Media disconnected&quot;,</div><div class="line">            &quot;   Connection-specific DNS Suffix  . : &quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;Tunnel adapter 6TO4 Adapter:&quot;,</div><div class="line">            &quot;&quot;,</div><div class="line">            &quot;   Connection-specific DNS Suffix  . : &quot;,</div><div class="line">            &quot;   IPv6 Address. . . . . . . . . . . : 2002:2a3e:9b0::2a3e:9b0&quot;,</div><div class="line">            &quot;   Default Gateway . . . . . . . . . : &quot;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">172.16.11.176              : ok=3    changed=0    unreachable=0    failed=0   </div><div class="line"></div><div class="line">Wednesday 26 October 2016  11:45:35 +0800 (0:00:00.062)       0:00:04.866 *****</div><div class="line">===============================================================================</div><div class="line">setup ------------------------------------------------------------------- 4.08s</div><div class="line">run ipconfig ------------------------------------------------------------ 0.69s</div><div class="line">debug ------------------------------------------------------------------- 0.06s</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Windows下Ansible工作原理&quot;&gt;&lt;a href=&quot;#Windows下Ansible工作原理&quot; class=&quot;headerlink&quot; title=&quot;Windows下Ansible工作原理&quot;&gt;&lt;/a&gt;Windows下Ansible工作原理&lt;/h1&gt;&lt;p&gt;An
    
    </summary>
    
      <category term="运维自动化" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Ansible" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/Ansible/"/>
    
    
      <category term="ansible" scheme="http://czero000.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>配置不同ssh-key访问不同git仓库</title>
    <link href="http://czero000.github.io/2016/10/20/git-different-sshkey.html"/>
    <id>http://czero000.github.io/2016/10/20/git-different-sshkey.html</id>
    <published>2016-10-20T12:03:58.000Z</published>
    <updated>2016-10-20T12:06:34.588Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是通过 ssh方式访问，例如 GitHub，当用户访问 Github 上的仓库时，用户会将本地的 <code>~/.ssh/id_rsa</code> 与上传到 GitHub 的公钥进行验证。但是在实际情况，很多会有自己的内部 git 仓库，或者是私人创建的仓库，当要求每个 git 仓库要使用不同 ssh-key 时，应该如何配置呢。</p>
<ul>
<li>生成 ssh-key</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &apos;user@mail.com&apos; -f id_rsa_github1</div><div class="line">ssh-keygen -t rsa -C &apos;user@mail.com&apos; -f id_rsa_github2</div></pre></td></tr></table></figure>
<ul>
<li>创建 config 配置文件</li>
</ul>
<p>该文件可以定义不同 ssh-key 访问不同 git仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/config</div><div class="line">Host github1.com                         \\ 别名</div><div class="line">    hostname github.com                 \\ 仓库地址</div><div class="line">    IdentityFile ~/.ssh/id_rsa.github   \\ ssh-key</div><div class="line">    user github1                         \\ 登录用户</div><div class="line"></div><div class="line">Host github2.com</div><div class="line">    hostname github.com</div><div class="line">    IdentityFile ~/.ssh/id_rsa.github2</div><div class="line">    user github2</div></pre></td></tr></table></figure></p>
<ul>
<li>连接远程仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone git@github1.com:github1/test.git</div><div class="line"></div><div class="line">git clone git@github2.com:github2/test.git</div></pre></td></tr></table></figure>
<p>这样就可以使用不同 ssh-key 来访问不同 GitHub 仓库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 是通过 ssh方式访问，例如 GitHub，当用户访问 Github 上的仓库时，用户会将本地的 &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; 与上传到 GitHub 的公钥进行验证。但是在实际情况，很多会有自己的内部 git 仓库，或者是私人创建的仓库，当
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
      <category term="Git" scheme="http://czero000.github.io/categories/System/Git/"/>
    
    
      <category term="git" scheme="http://czero000.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>IPsec和L2TP搭建VPN</title>
    <link href="http://czero000.github.io/2016/10/20/l2tp-vpn.html"/>
    <id>http://czero000.github.io/2016/10/20/l2tp-vpn.html</id>
    <published>2016-10-20T07:14:46.000Z</published>
    <updated>2017-01-11T07:12:42.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用-IPsec-和-L2TP-搭建-VPN"><a href="#利用-IPsec-和-L2TP-搭建-VPN" class="headerlink" title="利用 IPsec 和 L2TP 搭建 VPN"></a>利用 IPsec 和 L2TP 搭建 VPN</h1><h2 id="安装-EPEL-源"><a href="#安装-EPEL-源" class="headerlink" title="安装 EPEL 源"></a>安装 EPEL 源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install epel-release -y</div><div class="line"></div><div class="line">// CentOS Linux release 7.3.1611 (Core)版本，epel源的软件包存在bug，需单独下载安装xl2tpd</div><div class="line">wget http://dl.fedoraproject.org/pub/epel/testing/7/x86_64/x/xl2tpd-1.3.8-2.el7.x86_64.rpm</div><div class="line">rpm -ivh xl2tpd-1.3.8-2.el7.x86_64.rpm</div></pre></td></tr></table></figure>
<h2 id="安装-软件包"><a href="#安装-软件包" class="headerlink" title="安装 软件包"></a>安装 软件包</h2><p>Openswan 是 linux 下 VPN 协议 IPSec的一种实现，CentOS7安装源中有它的开源社区版，叫做 libreswan，先在来安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libreswan xl2tpd ppp lsof -y</div></pre></td></tr></table></figure></p>
<h2 id="设置内核参数"><a href="#设置内核参数" class="headerlink" title="设置内核参数"></a>设置内核参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo &quot;net.ipv4.ip_forward = 1&quot; |  tee -a /etc/sysctl.conf</div><div class="line">echo &quot;net.ipv4.conf.all.accept_redirects = 0&quot; |  tee -a /etc/sysctl.conf</div><div class="line">echo &quot;net.ipv4.conf.all.send_redirects = 0&quot; |  tee -a /etc/sysctl.conf</div><div class="line">for vpn in /proc/sys/net/ipv4/conf/*; do echo 0 &gt; $vpn/accept_redirects; echo 0 &gt; $vpn/send_redirects; done</div><div class="line">for i in /proc/sys/net/ipv4/conf/*;do echo 0 &gt; $i/rp_filter;done</div><div class="line">sysctl -p</div></pre></td></tr></table></figure>
<h2 id="添加-rc-local-文件"><a href="#添加-rc-local-文件" class="headerlink" title="添加 rc.local 文件"></a>添加 rc.local 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for vpn in /proc/sys/net/ipv4/conf/*; do echo 0 &gt; $vpn/accept_redirects; echo 0 &gt; $vpn/send_redirects; done</div><div class="line">for i in /proc/sys/net/ipv4/conf/*;do echo 0 &gt; $i/rp_filter;done</div></pre></td></tr></table></figure>
<h2 id="修改IPsec配置文件"><a href="#修改IPsec配置文件" class="headerlink" title="修改IPsec配置文件"></a>修改IPsec配置文件</h2><ul>
<li><p>在 <code>/etc/ipsec.d/</code> 目录下，新建配置文件 <code>l2tp.conf</code>，并添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#conn %default</div><div class="line">#    Forceencaps=yes</div><div class="line">conn L2TP-PSK-NAT  </div><div class="line">    rightsubnet=vhost:%priv</div><div class="line">    also=L2TP-PSK-noNAT</div><div class="line"></div><div class="line">conn L2TP-PSK-noNAT  </div><div class="line">    authby=secret</div><div class="line">    pfs=no</div><div class="line">    auto=add</div><div class="line">    type=transport</div><div class="line">    keyingtries=3</div><div class="line">    rekey=no</div><div class="line">    ikelifetime=8h</div><div class="line">    salifetime=1h</div><div class="line">    left=serverIP</div><div class="line">    leftprotoport=17/1701</div><div class="line">    right=%any</div><div class="line">    rightprotoport=17/%any</div></pre></td></tr></table></figure>
</li>
<li><p>设置共享秘钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/ipsec.d/l2tp.secrets</div><div class="line">59.51.149.125 %any: PSK &quot;ShareSecrets&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动-IPSec"><a href="#启动-IPSec" class="headerlink" title="启动 IPSec"></a>启动 IPSec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start ipsec</div><div class="line">systemctl enable ipsec</div></pre></td></tr></table></figure>
<h2 id="验证-IPSec-是否正常"><a href="#验证-IPSec-是否正常" class="headerlink" title="验证 IPSec 是否正常"></a>验证 IPSec 是否正常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ipsrc verify</div><div class="line">Verifying installed system and configuration files</div><div class="line"></div><div class="line">Version check and ipsec on-path                         [OK]</div><div class="line">Libreswan 3.15 (netkey) on 3.10.0-229.el7.x86_64</div><div class="line">Checking for IPsec support in kernel                    [OK]</div><div class="line"> NETKEY: Testing XFRM related proc values</div><div class="line">         ICMP default/send_redirects                    [OK]</div><div class="line">▽        ICMP default/accept_redirects                  [OK]</div><div class="line">         XFRM larval drop                               [OK]</div><div class="line">Pluto ipsec.conf syntax                                 [OK]</div><div class="line">Hardware random device                                  [N/A]</div><div class="line">Two or more interfaces found, checking IP forwarding    [OK]</div><div class="line">Checking rp_filter                                      [OK]</div><div class="line">Checking that pluto is running                          [OK]</div><div class="line"> Pluto listening for IKE on udp 500                     [OK]</div><div class="line"> Pluto listening for IKE/NAT-T on udp 4500              [OK]</div><div class="line"> Pluto ipsec.secret syntax                              [OK]</div><div class="line">Checking &apos;ip&apos; command                                   [OK]</div><div class="line">Checking &apos;iptables&apos; command                             [OK]</div><div class="line">Checking &apos;prelink&apos; command does not interfere with FIPSChecking for obsolete ipsec.conf options                 [OK]</div><div class="line">Opportunistic Encryption</div><div class="line">//  可以根据提示信息，修改相应配置，多数是内核参数</div></pre></td></tr></table></figure>
<h2 id="配置-xl2tpd"><a href="#配置-xl2tpd" class="headerlink" title="配置 xl2tpd"></a>配置 xl2tpd</h2><p>编辑配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">vim /etc/xl2tpd/xl2tpd.conf</div><div class="line">[global]</div><div class="line">listen-addr = serverIP</div><div class="line">auth file = /etc/ppp/chap-secrets</div><div class="line">ipsec saref = yes</div><div class="line">; force userspace = yes</div><div class="line">; debug tunnel = yes</div><div class="line"></div><div class="line">[lns default]</div><div class="line">ip range = 10.0.2.128-10.0.2.254</div><div class="line">local ip = 1.1.1.1</div><div class="line">require chap = yes</div><div class="line">refuse pap = yes</div><div class="line">require authentication = yes</div><div class="line">name = LinuxVPNserver</div><div class="line">ppp debug = yes</div><div class="line">pppoptfile = /etc/ppp/options.xl2tpd</div><div class="line">length bit = yes</div></pre></td></tr></table></figure></p>
<h2 id="配置-PPP"><a href="#配置-PPP" class="headerlink" title="配置 PPP"></a>配置 PPP</h2><p>编辑配置文件<code>/etc/ppp/options.xl2tpd</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">require-mschap-v2</div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div><div class="line">asyncmap 0</div><div class="line">auth</div><div class="line">crtscts</div><div class="line">lock</div><div class="line">hide-password</div><div class="line">modem</div><div class="line">debug</div><div class="line">name l2tpd</div><div class="line">proxyarp</div><div class="line">lcp-echo-interval 30</div><div class="line">lcp-echo-failure 4</div></pre></td></tr></table></figure></p>
<h2 id="添加测试用户"><a href="#添加测试用户" class="headerlink" title="添加测试用户"></a>添加测试用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim chap-secrets</div><div class="line">#</div><div class="line"># Secrets for authentication using CHAP</div><div class="line"># client        server  secret                  IP addresses</div><div class="line">test            l2tpd   123456                  10.0.12.100</div></pre></td></tr></table></figure>
<h2 id="启动-IPSec-1"><a href="#启动-IPSec-1" class="headerlink" title="启动 IPSec"></a>启动 IPSec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start xl2tpd</div><div class="line">systemctl enable xl2tpd</div></pre></td></tr></table></figure>
<h2 id="利用-iptable-配置转发规则"><a href="#利用-iptable-配置转发规则" class="headerlink" title="利用 iptable 配置转发规则"></a>利用 iptable 配置转发规则</h2><ul>
<li><p>gw.sh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">/sbin/iptables -t nat -F</div><div class="line"></div><div class="line">/sbin/iptables -t nat -A POSTROUTING -s 10.0.12.0/24 -d 172.16.0.0/16 -o eth1 -j SNAT --to-source 172.16.1.125</div><div class="line">/sbin/iptables -t nat -A POSTROUTING -s 10.0.12.0/24 ! -d 10.0.12.0/24 -o eth0 -j SNAT --to-source 59.51.149.125</div><div class="line">/sbin/iptables -t nat -A POSTROUTING -s 10.0.12.0/24 ! -d 172.16.0.0/16 -o eth0 -j SNAT --to-source 59.51.149.125</div></pre></td></tr></table></figure>
</li>
<li><p>forward.sh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 172.16.3.100 为办公电脑IP</div><div class="line">#!/bin/bash</div><div class="line">/sbin/iptables -F FORWARD</div><div class="line"></div><div class="line">##[test]</div><div class="line">/sbin/iptables -A FORWARD -s 10.0.12.100 -p tcp -d 172.16.3.100 -j ACCEPT</div><div class="line"></div><div class="line">##[default]</div><div class="line">/sbin/iptables -A FORWARD -s 10.0.12.0/24 -d 172.16.0.0/255.255.0.0 -j DROP</div><div class="line">#/sbin/iptables -A FORWARD -s 10.0.12.0/24 -d 59.151.39.0/255.255.255.0 -j DROP</div><div class="line">#/sbin/iptables -A FORWARD -s 10.0.12.0/24 -d 59.151.49.0/255.255.255.0 -j DROP</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用-IPsec-和-L2TP-搭建-VPN&quot;&gt;&lt;a href=&quot;#利用-IPsec-和-L2TP-搭建-VPN&quot; class=&quot;headerlink&quot; title=&quot;利用 IPsec 和 L2TP 搭建 VPN&quot;&gt;&lt;/a&gt;利用 IPsec 和 L2TP 搭建 V
    
    </summary>
    
      <category term="System" scheme="http://czero000.github.io/categories/System/"/>
    
      <category term="L2TP" scheme="http://czero000.github.io/categories/System/L2TP/"/>
    
    
      <category term="l2tp" scheme="http://czero000.github.io/tags/l2tp/"/>
    
  </entry>
  
  <entry>
    <title>通过jinja2生成虚拟主机配置</title>
    <link href="http://czero000.github.io/2016/10/20/ansible-dynamic-create-vhost.html"/>
    <id>http://czero000.github.io/2016/10/20/ansible-dynamic-create-vhost.html</id>
    <published>2016-10-20T07:12:22.000Z</published>
    <updated>2016-10-20T10:50:11.113Z</updated>
    
    <content type="html"><![CDATA[<p>在 ansibleplaybook 中，可以通过 JinJa2 可以生成多虚拟主机配置</p>
<h2 id="目标配置"><a href="#目标配置" class="headerlink" title="目标配置"></a>目标配置</h2><p>在实际使用中，需要通过 jinja2 模板生成多虚拟主机配置，希望最后可以生成下面配置</p>
<ul>
<li>apache</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerAdmin admin@czero000.com</div><div class="line">    DocumentRoot &quot;/data/htdocs/www.czero000.com</div><div class="line">    ServerName www.czero000.com</div><div class="line">    ErrorLog &quot;logs/www.czero000.com-error_log&quot;</div><div class="line">    CustomLog &quot;|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/logs/www.czero000.com-access_%Y%m%d_log 86400&quot; combined</div><div class="line">&lt;Directory &quot;/data/htdocs/www.czero000.com&quot;&gt;</div><div class="line">        DirectoryIndex index.html index.php</div><div class="line">        Options FollowSymLinks</div><div class="line">        AllowOverride None</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">&lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<ul>
<li>nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80 default_server;</div><div class="line">        server_name  www.czero000.com</div><div class="line">        root /home/website/www.czero000.com;</div><div class="line">        index index.html;</div><div class="line">    location / &#123;</div><div class="line">          try_files $uri $uri/ /index.php?$args;</div><div class="line">    &#125;</div><div class="line">    location ~ .*\.(php)?$ &#123;</div><div class="line">        expires 1s;</div><div class="line">        try_files $uri = 404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">        fastcgi_pass 127.0.0.1:9000;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">        access_log logs/www.czero000.com_access.log access;</div><div class="line">        error_log logs/www.czero000.com_error.log;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化-role"><a href="#初始化-role" class="headerlink" title="初始化 role"></a>初始化 role</h2><p>通过 ansible-galaxy 生成playbook目录</p>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><ul>
<li><p>添加变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Vhost</div><div class="line">VhostDomain:</div><div class="line">  - domain: &apos;www.czero000.com&apos;</div><div class="line">    ServerName: &apos;www.czero000.com&apos;</div><div class="line">    DocumentRoot: &apos;/home/website/www.czero000.com&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>编写 jinja2 模板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;% for vhost in VhostDomain %&#125;</div><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerAdmin admin.czero000.com</div><div class="line">    DocumentRoot &#123;&#123; vhost.DocumentRoot &#125;&#125;</div><div class="line">    ServerName &#123;&#123; vhost.ServerName &#125;&#125;</div><div class="line">    ErrorLog &quot;logs/&#123;&#123; vhost.ServerName &#125;&#125;-error_log&quot;</div><div class="line">    CustomLog &quot;|/usr/local/apache/bin/rotatelogs -l /usr/local/apache/logs/&#123;&#123; vhost.ServerName &#125;&#125;_%Y%m%d_log 86400&quot; combined</div><div class="line">&lt;Directory &quot;&#123;&#123; vhost.DocumentRoot &#125;&#125;&quot;&gt;</div><div class="line">        DirectoryIndex index.html index.php</div><div class="line">        Options FollowSymLinks</div><div class="line">        AllowOverride None</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">&lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写 task 文件</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Copy Vhost Config Files</div><div class="line">  template: src=vhost.conf.j2 dest=/usr/local/apache/conf/vhost/&#123;&#123; item.domain &#125;&#125;.conf owner=root group=root mode=0644</div><div class="line">  with_items: &quot;&#123;&#123; VhostDomain &#125;&#125;&quot;</div><div class="line">  #notify: Restart Apache.Service</div></pre></td></tr></table></figure>
<ul>
<li>编写总调度文件，执行 playbook</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat apache_conf.yml</div><div class="line">- name: Dynamic Create Vhost Conf</div><div class="line">  hosts: localhost</div><div class="line">  gather_facts: no</div><div class="line">  roles:</div><div class="line">    - apache_conf</div><div class="line"></div><div class="line">// 执行 playbook 生成配置文件</div><div class="line">ansible-playbook  apache_conf.yml</div></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li>添加变量</li>
</ul>
<p>在 default/main.yml 中添加变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># Vhost</div><div class="line">VhostDomain:</div><div class="line">  - domain: &apos;www.czero000.com&apos;</div><div class="line">    listen: &apos;80 default_server&apos;</div><div class="line">    root: &apos;/home/website/www.czero000.com&apos;</div><div class="line">    server_name: &apos;www.czero000.com&apos;</div><div class="line">    index: &apos;index.html&apos;</div><div class="line"></div><div class="line">Vhost_Location: |</div><div class="line">    location / &#123;</div><div class="line">              try_files $uri $uri/ /index.php?$args;</div><div class="line">        &#125;</div><div class="line">        location ~ .*\.(php)?$ &#123;</div><div class="line">            expires 1s;</div><div class="line">            try_files $uri = 404;</div><div class="line">            fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">            include fastcgi_params;</div><div class="line">            fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class="line">            fastcgi_index index.php;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">            fastcgi_pass 127.0.0.1:9000;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>编写 jinja2 模板</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;% for vhost in VhostDomain %&#125;</div><div class="line">server &#123;</div><div class="line">        listen &#123;&#123; vhost.listen | default(&apos;80 default_server&apos;) &#125;&#125;;</div><div class="line">&#123;% if vhost.server_name is defined %&#125;</div><div class="line">        server_name  &#123;&#123; vhost.server_name &#125;&#125;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% if vhost.root is defined %&#125;</div><div class="line">        root &#123;&#123; vhost.root &#125;&#125;;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% if vhost.index is defined %&#125;</div><div class="line">        index &#123;&#123; vhost.index &#125;&#125;;</div><div class="line">&#123;% endif%&#125;</div><div class="line"></div><div class="line">&#123;% if Vhost_Location is defined %&#125;</div><div class="line">    &#123;&#123; Vhost_Location&#125;&#125;</div><div class="line">&#123;% endif%&#125;</div><div class="line">&#123;% if vhost.server_name is defined %&#125;                                                                                                                                   </div><div class="line">        access_log logs/&#123;&#123; vhost.server_name &#125;&#125;_access.log access;</div><div class="line">        error_log logs/&#123;&#123; vhost.server_name &#125;&#125;_error.log;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编写 task 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Copy Vhost Config Files</div><div class="line">  template: src=vhost.conf.j2 dest=/usr/local/nginx/conf/vhost/&#123;&#123; item.domain &#125;&#125;.conf owner=root group=root mode=0644</div><div class="line">  with_items: &quot;&#123;&#123; VhostDomain &#125;&#125;&quot;</div><div class="line">  #notify: Restart Nginx.Service</div></pre></td></tr></table></figure>
<ul>
<li>编写总调度文件，执行 playbook<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat ngingx_conf.yml</div><div class="line">- name: Dynamic Create Vhost Conf</div><div class="line">  hosts: localhost</div><div class="line">  gather_facts: no</div><div class="line">  roles:</div><div class="line">    - nginx_conf</div><div class="line"></div><div class="line">// 执行 playbook 生成配置文件</div><div class="line">ansible-playbook  ngingx_conf.yml</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 ansibleplaybook 中，可以通过 JinJa2 可以生成多虚拟主机配置&lt;/p&gt;
&lt;h2 id=&quot;目标配置&quot;&gt;&lt;a href=&quot;#目标配置&quot; class=&quot;headerlink&quot; title=&quot;目标配置&quot;&gt;&lt;/a&gt;目标配置&lt;/h2&gt;&lt;p&gt;在实际使用中，需要通过
    
    </summary>
    
      <category term="运维自动化" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Ansible" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/Ansible/"/>
    
    
      <category term="ansible" scheme="http://czero000.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile创建blog</title>
    <link href="http://czero000.github.io/2016/10/20/docker-blog.html"/>
    <id>http://czero000.github.io/2016/10/20/docker-blog.html</id>
    <published>2016-10-20T02:45:00.000Z</published>
    <updated>2016-10-20T10:50:11.133Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个有趣的技术，在过去的两年已经从一个想法变成了全世界的机构都在采用来部署应用的技术。下面会通过 docker 来创建一个blog。</p>
<h1 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h1><p>Docker 是一个操作系统容器管理工具，通过将应用打包到操作系统容器里面，从而让你能轻松管理和部署应用。</p>
<h1 id="容器-vs-虚拟机"><a href="#容器-vs-虚拟机" class="headerlink" title="容器 vs 虚拟机"></a>容器 vs 虚拟机</h1><p>容器可能不如虚拟机一样为人所熟知，但是它们是另外的一种提供操作系统虚拟化的方法。然而，他们与标准的虚拟机有很大的差异。</p>
<p>标准的虚拟机通常包含一个完整的操作系统，OS 软件包，最后包含一两个应用。它是通过一个向虚拟机提供了硬件虚拟化的 Hypervisor 来实现的，允许单个服务器运行很多独立的被当做虚拟游客（virtual guest）的操作系统。</p>
<p>而容器与虚拟机的类似之处在于它们允许单个服务器运行多个操作环境（operating environment），然而这些环境不却是完整的操作系统。容器通常只包含必要的 OS 软件包和应用。他们通常不包含一个完整的操作系统或者硬件虚拟化。这也意味着比之虚拟机，容器的额外开销（overhead）更小。</p>
<p>容器和虚拟机通常被视为不能共生的技术，然而这通常是一个误解。虚拟机面向物理服务器，提供可以能与其他虚拟机一起共享这些物理资源的，功能完善的操作环境。容器通常是用来通过对单一主机的一个进程进行隔离，来保证被隔离的进程无法与处于同一个系统的其他进程进行互动。实际上，比起完全的虚拟机，容器与 BSD 的 Jail，chroot 的进程更加类似。</p>
<h1 id="Docker-提供了什么"><a href="#Docker-提供了什么" class="headerlink" title="Docker 提供了什么"></a>Docker 提供了什么</h1><p>Docker自身并不是一个容器的运行时环境；实际上 Docker 实际上是对容器技术不可知的（container technology agnostic），并且为了支持Solaris Zones和 BSD Jails 花了不少功夫。Docker 提供的是一种容器管理，打包和部署的方法。尽管这种类型的功能已经某一种程度地存在于虚拟机中，但在传统上，它们并不是为了绝大多数的容器方案而生的，而那些已经存在的，却又不如 Docker 一样容易使用且功能完善。</p>
<h1 id="通过-Dockerfile-方式部署一个-blog-转载"><a href="#通过-Dockerfile-方式部署一个-blog-转载" class="headerlink" title="通过 Dockerfile 方式部署一个 blog (转载)"></a>通过 Dockerfile 方式部署一个 blog (转载)</h1><ul>
<li>获取 blog 源码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone http://github.com/madflojo/blog.git</div><div class="line">cd blog</div></pre></td></tr></table></figure>
<ul>
<li>使用 FROM 继承一个 docker 镜像<br>Dockerfile的第一条命令是 <code>FROM</code> 指令。这用来将存在的 Docker 镜像指定为基础镜像，这会让docker 使用 nginx 镜像。如果想使用最原始的空白状态。可以制定 <code>ubuntu:latest</code>使用 ubuntu 镜像。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM nginx:latest</div><div class="line">MAINTAINER Charlie.Cui &lt;charlie.cui127@mail.com&gt;</div></pre></td></tr></table></figure>
<p>除了使用 <code>FROM</code> 指令，还使用了 <code>MAINTAINER</code> 指令，用来显示 Dockerfile 的作者。Docker支持使用 <code>#</code> 用来当做注释的标示。</p>
<ul>
<li>使用 <code>RUN</code> 来执行 <code>apt-get</code></li>
</ul>
<p>如果需要在 <code>docker</code> 中执行 <code>apt update</code> 和 <code>apt install python-dev</code>，可以通过 <code>RUN</code> 指令来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM nginx:latest</div><div class="line">MAINTAINER Charlie.Cui &lt;charlie.cui127@mail.com&gt;</div><div class="line"></div><div class="line">RUN apt -qq update</div><div class="line">RUN apt -qqy install python-dev python-pip</div></pre></td></tr></table></figure></p>
<ul>
<li>安装 python 模块</li>
</ul>
<p>如果需要安装 python 模块，在 docker 之外，可以使用 pip 命令完成并且引用在仓库中的一个名叫<code>requirements.txt</code>文件。Dockerfile 使用 <code>COPY</code> 指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FROM nginx:latest</div><div class="line">MAINTAINER Charlie.Cui &lt;charlie.cui127@mail.com&gt;</div><div class="line"></div><div class="line">RUN apt -qq update</div><div class="line">RUN apt -qqy install python-dev python-pip</div><div class="line"></div><div class="line">RUN mkdir -p /build/</div><div class="line">COPY requirements.txt /build/</div><div class="line">RUN pip install -r /build/requirements.txt</div></pre></td></tr></table></figure></p>
<ul>
<li>构建容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t blog:v1 .</div></pre></td></tr></table></figure>
<p>使用 <code>-t</code> 表示来讲这个镜像打上 blog 标签</p>
<ul>
<li>Docker 构建缓存</li>
</ul>
<p>当docker 构建一个镜像的时候，不仅仅构建一个单一的镜像，它实际上在整个构建过程中构建多个镜像。每进行一步会构建一个镜像，当构建相同的容器时，会使用已经缓存的镜像，而不是重新构建一个镜像。凡是都会有两面，好的一面是当应用场景是 copy 文件，当源文件被更改，再次运行时 docker 会检测到文件不同，会从新 copy 新的文件，但是如果是安装 python-dev 这个软件包，当仓库更新了软件包版本，docker 是没法检测到这个变化，会傻傻的使用缓存，这样就会安装了一个老版本的软件。解决这个需要在 docker 构建时制定 <code>--no-cache=True</code> 来禁用缓存</p>
<ul>
<li>部署 blog 其余部分</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">FROM nginx:latest</div><div class="line">MAINTAINER Charlie.Cui &lt;charlie.cui127@mail.com&gt;</div><div class="line"></div><div class="line">RUN apt -qq update</div><div class="line">RUN apt -qqy install python-dev python-pip</div><div class="line"></div><div class="line">RUN mkdir -p /build/</div><div class="line">COPY requirements.txt /build/</div><div class="line">RUN pip install -r /build/requirements.txt</div><div class="line"></div><div class="line">COPY static /build/static</div><div class="line">COPY templates /build/templates</div><div class="line">COPY hamerkop /build/</div><div class="line">COPY config.yml /build/</div><div class="line">COPY articles /build/articles</div><div class="line"></div><div class="line">RUN /build/hamerkop -c /build/config.yml</div></pre></td></tr></table></figure>
<p>当再次运行 <code>docker build -t blog:v1 .</code>来构建 docker 镜像</p>
<ul>
<li>运行一个定制化的容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 80:80 --name=blog blog:v1</div></pre></td></tr></table></figure>
<p>使用<code>-p</code>参数，可以标志让用户将一个端口从主机映射到容器的一个端口，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 是一个有趣的技术，在过去的两年已经从一个想法变成了全世界的机构都在采用来部署应用的技术。下面会通过 docker 来创建一个blog。&lt;/p&gt;
&lt;h1 id=&quot;什么是-Docker&quot;&gt;&lt;a href=&quot;#什么是-Docker&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="运维技术" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像</title>
    <link href="http://czero000.github.io/2016/10/20/docker-images.html"/>
    <id>http://czero000.github.io/2016/10/20/docker-images.html</id>
    <published>2016-10-20T02:44:48.000Z</published>
    <updated>2016-10-20T10:50:11.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><h2 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h2><ul>
<li>镜像是 Docker 的三大组件之一</li>
<li>Docker 镜像就是一个只读模版，一个镜像可以包含一个完整的ubuntu 操作系统，系统安装了 apache 和用户自定义应用软件。</li>
<li>镜像可以用来创建容器，Docker 提供了一个简单的机制来创建镜像或者更新现有镜像，用户甚至可以直接从其他人哪里下载已经做好的镜像来使用</li>
<li>Docker 运行容器之前需要本地存在对应镜像，如果不存在，Docker 就会从镜像仓库下载(默认是 Docker Hub 公共注册服务器的仓库)</li>
</ul>
<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>通过 <code>docker pull</code> 命令从仓库下载所需的镜像，镜像可以通过 <code>Docker Hub</code> 获取已有镜像并更新，也可以利用本地文件系统创建一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\\下载一个ubuntu16.04操作系统镜像</div><div class="line"> docker pull ubuntu:16.04</div></pre></td></tr></table></figure></p>
<p>该命令实际上是<code>docker pull registry.hub.docker.com/ubuntu:16.04</code>命令，即从注册服务器<code>registry.hub.docker.com</code>中的<code>ubuntu</code>仓库下载标记为16.04的镜像<br>有的时候官方注册服务器下载较慢，可以从其他仓库下载，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull somedomain:5000/ubuntu:16.04</div></pre></td></tr></table></figure></p>
<h2 id="列出当前镜像"><a href="#列出当前镜像" class="headerlink" title="列出当前镜像"></a>列出当前镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker images           </div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ubuntu              16.04               c73a085dc378        2 weeks ago         127.1 MB</div></pre></td></tr></table></figure>
<p>在列出的信息中，可以看到几个字段的信息</p>
<ul>
<li>来自那个仓库 -&gt; ubuntu</li>
<li>镜像的标记   -&gt; latest、16.04</li>
<li>ID         -&gt; 唯一</li>
<li>创建时间</li>
<li>镜像大小<br><code>TAG</code>信息标记来自同一个仓库的不同镜像，例如<code>ubuntu</code>仓库有多个镜像，通过TAG信息区分放行版本，例如，10.04、12.04、12.10等。通过下面命令指定镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\\ 通过ubuntu:16.04 启动一个容器</div><div class="line">docker run -t -i ubuntu:16.04 /bin/bash</div></pre></td></tr></table></figure>
<p>如果不执行 <code>TAG</code>，则默认使用 <code>latest</code> 标记信息</p>
<h2 id="修改已有镜像"><a href="#修改已有镜像" class="headerlink" title="修改已有镜像"></a>修改已有镜像</h2><ul>
<li>利用镜像启动一个容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name docker_test -i -t -d ubuntu:16.04 /bin/bash</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在容器中添加vim软件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install -y vim</div></pre></td></tr></table></figure></p>
<p>当结束后，使用<code>exit</code>退出，现在容器被改变了，使用docker commit命令提交更新后的副本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker commit -m &quot;Added Vim&quot; -a &quot;charlie.cui&quot; 50eabeaf73f6 ubuntu:16.04v2</div><div class="line">325a4e26e96fdefb70a9941db1c19ead801cf3ac5d9228bca6fc6c1a13c0ab92</div></pre></td></tr></table></figure></p>
<ul>
<li><code>-m</code> 来指定提交的说明信息,与使用版本控制工具一样</li>
<li><code>-a</code> 可以指定更新的用户信息</li>
<li>容器ID</li>
<li>指定目标镜像仓库名和tag信息<br>成功创建之后便会返回镜像的ID信息</li>
</ul>
<p>使用 <code>docker images</code> 来查看新创建的镜像</p>
<p>之后便可以使用新的镜像启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -t -i ubuntu:16.04v2 /bin/bash</div></pre></td></tr></table></figure></p>
<h3 id="利用-Dockerfile-来创建镜像"><a href="#利用-Dockerfile-来创建镜像" class="headerlink" title="利用 Dockerfile 来创建镜像"></a>利用 Dockerfile 来创建镜像</h3><p>使用 <code>docker commit</code> 来扩展一个镜像相对简单，但是不方便在一个团队中分享。可以使用 <code>docker build</code> 来创建一个新的镜像，首先需要创建一个 Dockerfile ，包含一些如何创建镜像的指令</p>
<ul>
<li>新建一个目录和一个 Dockerfile</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir docker</div><div class="line">cd docker/</div><div class="line">touch Dockerfile</div></pre></td></tr></table></figure>
<ul>
<li>Dockerfile 中每一条指令都创建镜像的一层<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat Dockerfile</div><div class="line">#This is a comment</div><div class="line">FROM ubuntu:16.04</div><div class="line">MAINTAINER Charlie.Cui &lt; charlie.cui127@gmail.com &gt; </div><div class="line">RUN apt-get -qq update</div><div class="line">RUN apt-get -qqy install vim</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Dockerfile 的基本语法</p>
<ul>
<li>使用#来注释</li>
<li><code>FROM</code>指令告诉Docker使用哪个镜像作为基础镜像</li>
<li>接着为维护者信息</li>
<li><code>RUN</code>开头的指令会在创建中运行，比如安装一个软件包，在这里使用<code>apt-get</code>安装vim</li>
</ul>
<p>编写 Dockerfile 之后，可以使用 <code>docker build</code> 来生成镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">docker build -t &quot;ubuntu16.04:v1&quot; . </div><div class="line">Sending build context to Docker daemon 3.072 kB</div><div class="line">Step 1 : FROM ubuntu:16.04</div><div class="line"> ---&gt; e9ae3c220b23</div><div class="line">Step 2 : MAINTAINER Charlie.Cui </div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; 16d77dc9a444</div><div class="line">Step 3 : RUN apt-get -y -qq update</div><div class="line"> ---&gt; Running in b8407b9d75c4</div><div class="line"> ---&gt; 8721117f7c1f</div><div class="line">...</div><div class="line">Processing triggers for libc-bin (2.19-0ubuntu6.6) ...</div><div class="line"> ---&gt; 5a4b35abd4c4</div><div class="line">Removing intermediate container bb09f1a73b30</div><div class="line">Successfully built 5a4b35abd4c4</div></pre></td></tr></table></figure></p>
<p>其中 <code>-t</code> 标记添加 tag，指定新的镜像用户信息。 <code>.</code>是 Dockerfile 所在的路径(当前目录)，也可以使用一个具体的 Dockerfile 路径</p>
<p>上面的过程可以看到 build 进程在执行操作。它所做的第一件事就是上传 Dockerfile 内容，应为所有的操作都是根据 Dockerfile 内容来执行。<br>然后，Dockfile 中的指令被一条一条的执行，每一步都创建了一个新的容器，在容器中执行指令并提交修改(跟 docker commit 命令一样)。当所有的指令执行之后，返回最终的镜像 ID，所有的中间步骤产生的容器都被清理掉。</p>
<p><strong>注： Dockerfile 中执行命令不能超过127</strong></p>
<p>此外，还可以利用 ADD 命令赋值本地文件到镜像；用 <code>EXPOSE</code> 命令向外部开放端口；用 <code>CMD</code> 命令来描述容器启动后运行的程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ADD myApp /var/www</div><div class="line">EXPOSE 80</div><div class="line">CMD [&quot;/usr/sbin/apachectl&quot;, &quot;-d&quot;, &quot;FOREGROUND&quot;]</div></pre></td></tr></table></figure></p>
<p>现在可以利用新创建的镜像启动一个容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker]# docker run -t -i ubuntu16.04:v1 /bin/bash</div></pre></td></tr></table></figure></p>
<p>还可以用 <code>docker tag</code>命令修改镜像标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag 5a4b35abd4c4 ubuntu16.04:devel</div></pre></td></tr></table></figure></p>
<h3 id="本地文件系统导入"><a href="#本地文件系统导入" class="headerlink" title="本地文件系统导入"></a>本地文件系统导入</h3><p>要从本地文件系统导入一个镜像，可以使用openvz的模版来创建：openvz的模版下载地址：<a href="http://openvz.org/Download/templates/precreated" target="_blank" rel="external">http://openvz.org/Download/templates/precreated</a></p>
<p>下载一个centos-7-x86_64的镜像，使用下面命令导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.openvz.org/template/precreated/centos-7-x86_64.tar.gz</div><div class="line">cat centos-7-x86_64.tar.gz | docker import - centos:7</div><div class="line">45a9c0d13bd2d94a69f8a70501541f5329dbbc4760e610013a801d8e11d8cb46</div></pre></td></tr></table></figure></p>
<p>查看导入的新镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">centos              7                   45a9c0d13bd2        7 minutes ago       564.3 MB</div></pre></td></tr></table></figure></p>
<h3 id="存出镜像"><a href="#存出镜像" class="headerlink" title="存出镜像"></a>存出镜像</h3><p>如果想要导出镜像到本地文件，可以使用<code>docker save</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\\ 保存镜像到本地文件</div><div class="line">docker save -o ubuntu_16.04.tar ubuntu:16.04</div></pre></td></tr></table></figure></p>
<h3 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h3><p>可以使用<code>docker load</code>从导出的本地文件在导入到本地镜像库,命令会导入镜像以及其他的元数据信息(标签等)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker load --input ubuntu_16.04.tar</div><div class="line">或者</div><div class="line">docker load &lt; ubuntu_16.04.tar</div></pre></td></tr></table></figure></p>
<h4 id="移除本地镜像"><a href="#移除本地镜像" class="headerlink" title="移除本地镜像"></a>移除本地镜像</h4><p>如果要移除本地镜像，使用<code>docker rmi</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dock rmi ubuntu:16.04</div></pre></td></tr></table></figure></p>
<p><strong><em> 在删除镜像之前要先<code>docker rm</code>删除掉依赖于这个镜像的容器 </em></strong></p>
<h3 id="清理所有为打过标签的本地镜像"><a href="#清理所有为打过标签的本地镜像" class="headerlink" title="清理所有为打过标签的本地镜像"></a>清理所有为打过标签的本地镜像</h3><p><code>docker images</code> 可以列出本地的所有镜像，其中有很多中间状态的未打过标签的镜像，大量占用磁盘空间，使用下面命令清理本地镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker rmi $(docker images -q -f &quot;dangling=true&quot;)</div><div class="line"></div><div class="line">\\ 完整写法</div><div class="line">docker rmi $(docker images --quiet --filter &quot;dangling=true&quot;)</div></pre></td></tr></table></figure>
<h3 id="镜像的实现原理"><a href="#镜像的实现原理" class="headerlink" title="镜像的实现原理"></a>镜像的实现原理</h3><blockquote>
<p>Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这<br>些不同的层结合到一个镜像中去。<br>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更<br>常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不<br>变的基础上允许用户在其上进行一些写操作。 Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h1&gt;&lt;h2 id=&quot;什么是镜像&quot;&gt;&lt;a href=&quot;#什么是镜像&quot; class=&quot;headerlink&quot; title=&quot;什么是镜像&quot;&gt;&lt;/a&gt;什么是镜
    
    </summary>
    
      <category term="运维技术" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门介绍</title>
    <link href="http://czero000.github.io/2016/10/20/rudiments-of-docker.html"/>
    <id>http://czero000.github.io/2016/10/20/rudiments-of-docker.html</id>
    <published>2016-10-20T02:43:29.000Z</published>
    <updated>2016-10-20T10:50:11.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h1><h2 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h2><blockquote>
<p>Docker is an open-source engine that automates the deployment of any application as a lightweight, portable, self-sufficient container that will run virtually anywhere.</p>
</blockquote>
<p>Docker[<a href="http://www.docker.com/" target="_blank" rel="external">http://www.docker.com/</a>] 是 PaaS 提供商 <a href="http://www.dotcloud.com/" target="_blank" rel="external">dotCloud</a> 开源的一个基于 LXC 的高级容器引擎， <a href="http://github.com/docker/docker" target="_blank" rel="external">]源代码</a>托管在 <a href="http://www.github.com" target="_blank" rel="external">Github</a> 上, 基于go语言并遵从Apache2.0协议开源。Docker近期非常火热，无论是从 GitHub 上的代码活跃度，还是Redhat宣布在 <a href="http://server.cnw.com.cn/server-os/htm2014/20140616_303249.shtml" target="_blank" rel="external">RHEL7中正式支持Docker</a>，都给业界一个信号，这是一项创新型的技术解决方案。就连 Google 公司的 Compute Engine 也支持 docker 在其之上运行，国内 “BAT” 先锋企业百度 Baidu App Engine(BAE) 平台也是<a href="http://blog.docker.com/2013/12/baidu-using-docker-for-its-paas/" target="_blank" rel="external">以Docker作为其PaaS云基础</a>。</p>
<p>Docker产生的目的就是为了解决以下问题：</p>
<ol>
<li><p>环境管理复杂：从各种 OS 到各种中间件再到各种 App，一款产品能够成功发布，作为开发者需要关心的东西太多，且难于管理，这个问题在软件行业中普遍存在并需要直接面对。Docker可以简化部署多种应用实例工作，比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个 Image 部署。</p>
</li>
<li><p>云计算时代的到来：AWS 的成功，引导开发者将应用转移到云上, 解决了硬件管理的问题，然而软件配置和管理相关的问题依然存在 (AWS cloudformation是这个方向的业界标准, 样例模板可参考这里)。Docker 的出现正好能帮助软件开发者开阔思路，尝试新的软件管理方法来解决这个问题。</p>
</li>
<li><p>虚拟化手段的变化：云时代采用标配硬件来降低成本，采用虚拟化手段来满足用户按需分配的资源需求以及保证可用性和隔离性。然而无论是 KVM 还是 Xen，在 Docker 看来都在浪费资源，因为用户需要的是高效运行环境而非OS，GuestOS 既浪费资源又难于管理，更加轻量级的 LXC 更加灵活和快速。<br><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/vm.png" alt="vm"><br><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/docker.png" alt="docker"></p>
</li>
<li><p>LXC 的便携性：LXC 在 Linux 2.6 的 Kernel 里就已经存在了，但是其设计之初并非为云计算考虑的，缺少标准化的描述手段和容器的可便携性，决定其构建出的环境难于分发和标准化管理(相对于 KVM 之类 image 和 snapshot 的概念)。Docker 就在这个问题上做出了实质性的创新方法。</p>
</li>
</ol>
<h2 id="Docker的主要特性"><a href="#Docker的主要特性" class="headerlink" title="Docker的主要特性"></a>Docker的主要特性</h2><ul>
<li>文件系统隔离： 每个进程容器运行在完全独立的根文件系统里。</li>
<li>资源隔离： 可以使用 cgroup 为每个进程容器分配不同的系统资源，例如 CPU 和内存。</li>
<li>网络隔离： 每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和 IP 地址。</li>
<li>写时复制： 采用写时复制方式创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。</li>
<li>日志记录： Docker 将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索。</li>
<li>变更管理： 容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器。无需使用模板或手动配置。</li>
<li>交互式 Shell： Docker 可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互 shell。</li>
</ul>
<h2 id="Docker-vs-传统虚拟化技术"><a href="#Docker-vs-传统虚拟化技术" class="headerlink" title="Docker vs 传统虚拟化技术"></a>Docker vs 传统虚拟化技术</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式（xen、kvm、vmware）相比具有众多的优势。</p>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而 Docker 只需要启动 10 个隔离的应用即可。</p>
<p>具体说来，Docker 在如下几个方面具有较大的优势。</p>
<ul>
<li><p>更快速的交付和部署<br>对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。<br>开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p>
</li>
<li><p>更高效的虚拟化<br>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。</p>
</li>
<li><p>更轻松的迁移和扩展<br>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p>
</li>
<li><p>更简单的管理<br>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。</p>
</li>
</ul>
<p>对比传统虚拟机总结：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为 MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<h2 id="Docker-vs-lxc"><a href="#Docker-vs-lxc" class="headerlink" title="Docker vs lxc"></a>Docker vs lxc</h2><p>Docker 以 Linux 容器 LXC 为基础，实现轻量级的操作系统虚拟化解决方案。在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便，具体改进有</p>
<ul>
<li>Portable deployment across machines</li>
</ul>
<p>Docker 提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个 Container；而 LXC 本身可能因为不同机器的不同配置而无法方便地移植运行；</p>
<ul>
<li>Application-centric</li>
</ul>
<p>Docker 以 App 为中心，为应用的部署做了很多优化，而 LXC 的帮助脚本主要是聚焦于如何机器启动地更快和耗更少的内存；</p>
<ul>
<li><p>Automatic build<br>Docker 为 App 提供了一种自动化构建机制（Dockerfile），包括打包，基础设施依赖管理和安装等等；</p>
</li>
<li><p>Versioning</p>
</li>
</ul>
<p>Docker 提供了一种类似 git 的 Container 版本化的机制，允许你对你创建过的容器进行版本管理，依靠这种机制，你还可以下载别人创建的 Container，甚至像 git 那样进行合并；</p>
<ul>
<li>Component reuse</li>
</ul>
<p>Docker Container 是可重用的，依赖于版本化机制，你很容易重用别人的 Container，作为基础版本进行扩展；</p>
<ul>
<li>Sharing</li>
</ul>
<p>Docker Container 是可共享的，有点类似 github 一样，Docker 有自己的 INDEX，你可以创建自己的 Docker 用户并上传和下载 Docker Image；</p>
<ul>
<li>Tool ecosystem</li>
</ul>
<p>Docker 提供了很多的工具链，形成了一个生态系统；这些工具的目标是自动化、个性化和集成化，包括对 PAAS 平台的支持等。</p>
<h2 id="docker-应用场景"><a href="#docker-应用场景" class="headerlink" title="docker 应用场景"></a>docker 应用场景</h2><p>Docker 作为一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker 可以自动化打包和部署任何应用、创建一个轻量级私有 PaaS 云、搭建开发测试环境、部署可扩展的 Web 应用等。这决定了它在企业中的应用场景是有限的，Docker 将自己定位为“分发应用的开放平台”，其网站上也明确地提到了 Docker的典型应用场景</p>
<blockquote>
<ul>
<li>Automating the packaging and deployment of applications</li>
<li>Creation of lightweight, private PAAS environments</li>
<li>Automated testing and continuous integration/deployment</li>
<li>Deploying and scaling web apps, databases and backend services</li>
</ul>
</blockquote>
<p>对应用进行自动打包和部署，创建轻量、私有的 PAAS 环境，自动化测试和持续整合与部署，部署和扩展Web应用、数据库和后端服务。</p>
<p>平台即服务一般与大数据量系统同在，反观当前我司各 IT 系统，可以在以下情形下使用 docker 替代方案：</p>
<ol>
<li><p>结合 vagrant 或 supervisor，搭建统一的开发、测试环境<br>多个开发人员共同进行一个项目，就必须保持开发环境完全一致，部署到测试环境、正式环境后，最好都是同一套环境，通过容器来保存状态，分发给开发人员或部署，可以让“代码在我机子上运行没有问题”这种说辞将成为历史。</p>
</li>
<li><p>对 memcached、mysql 甚至 tomcat，打包成一个个容器，避免重复配置<br>比如将一个稳定版本的、已配置完善的 mysql，固化在一个镜像中，假如有新的环境要用到 mysql 数据库，便不需要重新安装、配置，而只需要启动一个容器瞬间完成。tomcat 应用场景更多，可以将不同版本的 jvm 和 tomcat 打包分发，应用于多 tomcat 集群，或在测试服务器上隔离多个不同运行环境要求的测试应用（例如旧系统采用的是 jdk6，新系统在jdk7上开发，但共用同一套测试环境）。</p>
</li>
</ol>
<p><strong>docker不足</strong></p>
<ul>
<li><p>LXC 是基于 cgroup 等 linux kernel 功能的，因此 container 的 guest 系统只能是 linux base 的</p>
</li>
<li><p>隔离性相比 KVM之类的虚拟化方案还是有些欠缺，所有 container公用一部分的运行库</p>
</li>
<li><p>网络管理相对简单，主要是基于 namespace 隔离</p>
</li>
<li><p>cgroup 的 cpu 和 cpuset 提供的 cpu 功能相比 KVM 的等虚拟化方案相比难以度量(所以 dotcloud 主要是安内存收费)</p>
</li>
<li><p>container 随着用户进程的停止而销毁，container 中的 log 等用户数据不便收集</p>
</li>
</ul>
<p>另外，Docker 是面向应用的，其终极目标是构建 PAAS 平台，而现有虚拟机主要目的是提供一个灵活的计算资源池，是面向架构的，其终极目标是构建一个 IAAS 平台，所以它不能替代传统虚拟化解决方案。目前在容器可管理性方面，对于方便运维，提供 UI 来管理监控各个 containers的功能还不足，还都是第三方实现如 DockerUI、Dockland、Shipyard 等。</p>
<h2 id="docker-组成部分"><a href="#docker-组成部分" class="headerlink" title="docker 组成部分"></a>docker 组成部分</h2><p><img src="http://ofc9x1ccn.bkt.clouddn.com/docker/make_docker.png" alt="make_docker"><br>Docker 使用客户端-服务器 (client-server) 架构模式。Docker 客户端会与 Docker 守护进程进行通信。Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的Docker 容器。Docker 客户端和守护进程可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过socket或者 RESTful API 进行通信。</p>
<h3 id="images-镜像"><a href="#images-镜像" class="headerlink" title="images 镜像"></a>images 镜像</h3><p>Docker 镜像就是一个只读的模板。例如，一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。<br>镜像可以用来创建 Docker 容器。<br>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>
<h3 id="container-容器"><a href="#container-容器" class="headerlink" title="container 容器"></a>container 容器</h3><p>Docker 利用容器来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。 镜像是只读的，容器在启动的时候创建一层可写层作为最上层。</p>
<h3 id="repository-仓库"><a href="#repository-仓库" class="headerlink" title="repository 仓库"></a>repository 仓库</h3><p>仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<ul>
<li>公开仓库</li>
</ul>
<p>docker团队控制的top-level的顶级repository，即<a href="http://registry.hub.docker.com/" target="_blank" rel="external">Docker Hub</a>，存放了数量庞大的镜像供用户下载，任何人都能读取，里面包含了许多常用的镜像，如ubuntu, mysql ,redis, python等。</p>
<ul>
<li>个人仓库</li>
</ul>
<p>个人公共库也是被托管在Docker Hub上，网络上的其它用户也可以pull你的仓库（如docker pull seanloook/centos6）你可以在修改完自己的container之后，通过commit命令把它变成本地的一个image，push到自己的个人公共库。（在此之前你需要docker login登录，或者vi ~/.dockercfg。）</p>
<ul>
<li>私有仓库</li>
</ul>
<p>首先与另外一种仓库区分——Docker Hub Private Repository，它简单理解为公网上的个人私有库，与上面的个人公共库相对应，在Docker Hub上Create Repository时选择Private便是，只有你自己才可以读写。<br>这里所说的私有仓库是指自己在本地服务器上搭建的专属自己的内部仓库docker-registry，俗称“私服”，供无法访问互联网的内部网络使用，或者镜像到本地一份以加快pull、push的速度。<br>它与公共仓库最明显的区分就是repository的命名，如必须使用带.的主机名或域名，后面必须接:port，如sean.tp-link.net:5000/centos6:your_tag_name，而公共仓库第一个斜杠前表示的是登录用户名。命名关系到推送到哪个服务器的哪个位置，</p>
<h2 id="运行一个容器的内部过程"><a href="#运行一个容器的内部过程" class="headerlink" title="运行一个容器的内部过程"></a>运行一个容器的内部过程</h2><p>docker client告诉docker daemon运行一个容器，例如：docker run -i -t ubuntu /bin/bash<br>让我们分解一下这个命令，docker client启动使用一个二进制的docker命令，最小的docker client需要你告诉docker daemon你的容器是从哪个docker镜像构建的，你希望在容器内部运行哪个命令。所以启动过程如下：</p>
<ul>
<li>Pulling the ubuntu image</li>
</ul>
<p>docker检查是否存在ubuntu镜像，如果本地不存在ubuntu镜像，则docker会到docker index下载。</p>
<ul>
<li>Creates a new container</li>
</ul>
<p>利用镜像创建容器</p>
<ul>
<li>Allocates a filesystem and mounts a read-write layer</li>
</ul>
<p>为镜像创建文件系统层和read-write层</p>
<ul>
<li>Allocates a network / bridge interface</li>
</ul>
<p>为容器创建网络接口，使容器和本地机器可以通讯</p>
<ul>
<li>Sets up an IP address</li>
</ul>
<p>在地址池中为容器分配一个可用的IP地址</p>
<ul>
<li>Executes a process that you specify</li>
</ul>
<p>运行你的应用</p>
<ul>
<li>Captures and provides application output</li>
</ul>
<p>连接log的标准输入、输出、错误，以使你直到你的应用是否正常运行</p>
<h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><p>Docker可以运行在Ubuntu16.04 LTS 和 CentOS7.x上，可能会和其他的二进制 EL7 兼容工作，但是 Docker 官方并没有去做测试。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先决条件：</p>
<ul>
<li>运行64为CPU架构（x86_64和amd64），不支持32位</li>
<li>运行Linux3.8 或更高版本，老版本的2.6.x及之后版本也可以运行，但是运行结果大不相同</li>
<li>内核必须支持合适的存储驱动（storagedriver）<ul>
<li>Device Manager</li>
<li>AUFS</li>
<li>vfs</li>
<li>btrfs</li>
</ul>
</li>
<li>内核必须支持并开启cgroup和命名空间功能</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>更新系统</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt install linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class="line">apt-get install apt-transport-https ca-certificates</div></pre></td></tr></table></figure>
<ul>
<li>添加 GPG Key</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</div></pre></td></tr></table></figure>
<ul>
<li>增加安装源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim /etc/apt/sources.list.d/docker.list</div><div class="line">// On Ubuntu Precise 12.04 (LTS)</div><div class="line">deb http://apt.dockerproject.org/repo ubuntu-precise main</div><div class="line">// On Ubuntu Trusty 14.04 (LTS)</div><div class="line">deb http://apt.dockerproject.org/repo ubuntu-trusty main</div><div class="line">// Ubuntu Wily 15.10</div><div class="line">deb http://apt.dockerproject.org/repo ubuntu-wily main</div><div class="line">// Ubuntu Xenial 16.04 (LTS)</div><div class="line">deb http://apt.dockerproject.org/repo ubuntu-xenial main</div></pre></td></tr></table></figure>
<ul>
<li>安装docker</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt update</div><div class="line">apt install docker</div></pre></td></tr></table></figure>
<ul>
<li>启动docker</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start docker</div></pre></td></tr></table></figure>
<ul>
<li>验证启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">docker info</div><div class="line">Containers: 0</div><div class="line"> Running: 0</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 0</div><div class="line">Server Version: 1.12.2</div><div class="line">Storage Driver: aufs</div><div class="line"> Root Dir: /var/lib/docker/aufs</div><div class="line"> Backing Filesystem: extfs</div><div class="line"> Dirs: 0</div><div class="line"> Dirperm1 Supported: true</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div></pre></td></tr></table></figure>
<h1 id="使用-Docker及-docker-命令汇总"><a href="#使用-Docker及-docker-命令汇总" class="headerlink" title="使用 Docker及 docker 命令汇总"></a>使用 Docker及 docker 命令汇总</h1><h2 id="查看-docker-信息"><a href="#查看-docker-信息" class="headerlink" title="查看 docker 信息"></a>查看 docker 信息</h2><ul>
<li>查看 docker 版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker Version</div></pre></td></tr></table></figure>
<ul>
<li>显示 docker 系统的信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker info</div></pre></td></tr></table></figure>
<h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><ul>
<li>检索 image</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// docker search image_name</div><div class="line">docker search ubuntu:16.04</div></pre></td></tr></table></figure>
<ul>
<li>下载一个预建立的镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// docker pull image_name</div><div class="line">docker pull ubuntu:16.04</div><div class="line">Digest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737</div><div class="line">Status: Downloaded newer image for ubuntu:16.04</div></pre></td></tr></table></figure>
<p>这个将从索引仓库中通过名字找到ubuntu镜像，并从索引仓库中心下载到本地镜像存储<br>当镜像下载成功后，你可以看到12位的hash值，如c73a085dc378，这是下载完整的镜像的精简ID，这些短的镜像ID是完整镜像ID前12个字符—可以使用docker inspect或者docker images -no-trunc=true来获取完整镜像ID</p>
<ul>
<li>列出镜像列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<ul>
<li>删除一个或者多个镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//docker rmi image_name</div><div class="line">docker rmi ubuntu:16.04</div></pre></td></tr></table></figure>
<ul>
<li>显示一个镜像的历史</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// docker history image_name</div><div class="line">docker history ubuntu:16.04</div></pre></td></tr></table></figure>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ul>
<li>创建容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//使用 docker run 命令创建容器,-i 保证容器中 STDIN 开启，-t 分配一个伪终端</div><div class="line">docker run -i -t ubuntu /bin/bash</div></pre></td></tr></table></figure>
<p>使用 ubuntu:16.04 运行一个交互性的 shell,分配一个伪终端，附带 stdin 和 stout ,如果想要退出伪终端，使用 CTRL -p + CTRL -q,容器只有在指定的 /bin/bash 命令处于运行状态，容器才会运行，一旦退出 <code>/bin/bash</code>，容器随之停止。</p>
<p>如果容器因为某种错误导致停止，可以通过<code>--restart</code>标志，让docker自动重启容器。–restart会检查容器的退出状态，并据此来判断是否要重启容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --restart=always --name=docker_test -i -t -d ubuntu:16,04 /bin/bash</div></pre></td></tr></table></figure></p>
<ul>
<li>容器命名</li>
</ul>
<p>容器命名可以是使用小写字母a-z、大写字母A-Z、数字0-9、下划线、圆点、横线。容器的命名必须是唯一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name docker_test -i -t ubuntu:16.04 /bin/bash</div></pre></td></tr></table></figure></p>
<p>可以通过增加 <code>-d</code> 参数，创建一个长时间运行的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name docker_test -i -t -d ubuntu:16.04 /bin/bash</div></pre></td></tr></table></figure></p>
<ul>
<li>查看容器状态</li>
</ul>
<p>通过 <code>docker ps -a</code>可以列出所有停止、运行的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">fd74d17e54f1        ubuntu:16.04        &quot;/bin/bash&quot;         2 minutes ago       Up 2 minutes                            docker_test</div></pre></td></tr></table></figure></p>
<ul>
<li>查看容器进程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker top docker_test</div></pre></td></tr></table></figure>
<ul>
<li>深入容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取更加详细的 docker 信息</div><div class="line">docker inspect docker_test</div></pre></td></tr></table></figure>
<ul>
<li>启动、重启、连接容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//启动</div><div class="line">docker start docker_test</div><div class="line"></div><div class="line">//停止</div><div class="line">docker stop docker_test</div><div class="line"></div><div class="line">// 杀死</div><div class="line">docker stop docker_test</div><div class="line"></div><div class="line">// 连接</div><div class="line">docker sttach docker_test</div></pre></td></tr></table></figure>
<ul>
<li>在容器内部运行进程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// -d 表明在后台运行一个进程</div><div class="line">docker exec -d docker_test touch /etc/new_config_file</div><div class="line"></div><div class="line">// 打开一个交互性的shell</div><div class="line">docker exec -i -t docker_test /bin/bash</div></pre></td></tr></table></figure>
<ul>
<li>查看容器输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//到目前为止收集的输出</div><div class="line">docker logs docker_test</div><div class="line">//使用-f 可以监控docker输出</div><div class="line">docker logs -f docker_test</div><div class="line">//加上tail 命令可以查看某段输出，如最后10行</div><div class="line">docker log --tail 10 docker_tet</div><div class="line">//使用 -t 可以在每条日志加上时间戳</div><div class="line">docker log -ft docker_test</div></pre></td></tr></table></figure>
<ul>
<li>保存容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// docker commit id new_image_name</div><div class="line">docker commit 2194cf55f5ea docker_test</div></pre></td></tr></table></figure>
<ul>
<li>删除容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 所有容器</div><div class="line">docker rm `docker ps -a -q`</div><div class="line">// 指定容器</div><div class="line">docker rm name/id</div></pre></td></tr></table></figure>
<ul>
<li>查看容器被修改的文件或目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker diff docker_test</div></pre></td></tr></table></figure>
<ul>
<li>拷贝文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker cp [name|id]:container_path  local_path</div></pre></td></tr></table></figure>
<h2 id="保存和加载镜像"><a href="#保存和加载镜像" class="headerlink" title="保存和加载镜像"></a>保存和加载镜像</h2><ul>
<li>保存镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save image_name -o file_path</div></pre></td></tr></table></figure>
<ul>
<li>加载本地镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker load -i file_path</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h1&gt;&lt;h2 id=&quot;Docker-是什么&quot;&gt;&lt;a href=&quot;#Docker-是什么&quot; cla
    
    </summary>
    
      <category term="运维技术" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Docker" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/Docker/"/>
    
    
      <category term="docker" scheme="http://czero000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-Playbooks</title>
    <link href="http://czero000.github.io/2016/10/19/ansible-playbook.html"/>
    <id>http://czero000.github.io/2016/10/19/ansible-playbook.html</id>
    <published>2016-10-19T06:41:10.000Z</published>
    <updated>2016-10-20T10:50:11.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Playbooks"><a href="#Playbooks" class="headerlink" title="Playbooks"></a>Playbooks</h1><p>Playbooks 是 Ansible 的配置、部署、编排语言，相当于控制远程主机的一系列命令的集合，通过 YAML 语言编写。Ansible-Playbook 命令根据自上而写的顺序依次执行。 Playbook 允许传输摸个命令的状态到后面的指令，或者从一台主机的文件中获取内容并赋值变量，然后传给另外一台主机使用，这是 ansible 命令无法实现的。</p>
<h2 id="YAML-语法介绍"><a href="#YAML-语法介绍" class="headerlink" title="YAML 语法介绍"></a>YAML 语法介绍</h2><h3 id="文件开始符"><a href="#文件开始符" class="headerlink" title="文件开始符"></a>文件开始符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="数组列表"><a href="#数组列表" class="headerlink" title="数组列表"></a>数组列表</h3><p>列表中的所有成员都开始于相同缩进级别，并使用 <code>-</code> 来作为开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Apple</div><div class="line">- Orange</div><div class="line">- Mango</div></pre></td></tr></table></figure></p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典是有一个简单的 <code>Key: value</code> 形式组成，注意 <code>:</code> 后面有<strong>空格</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name: charlie</div><div class="line">job: Developer</div><div class="line">mail: charlie.cui127@gmail.com</div></pre></td></tr></table></figure></p>
<p>在 playbook 中会有更为复杂的用法</p>
<ul>
<li>字典与字典嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">martin:</div><div class="line">    name: Martin D&apos;vloper</div><div class="line">    job: Developer</div><div class="line">    skill: Elite</div></pre></td></tr></table></figure>
<ul>
<li>字典与数组的嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-  martin:</div><div class="line">    name: Martin D&apos;vloper</div><div class="line">    job: Developer</div><div class="line">    skills:</div><div class="line">      - python</div><div class="line">      - perl</div><div class="line">      - pascal</div><div class="line">-  tabitha:</div><div class="line">    name: Tabitha Bitumen</div><div class="line">    job: Developer</div><div class="line">    skills:</div><div class="line">      - lisp</div><div class="line">      - fortran</div><div class="line">      - erlang</div></pre></td></tr></table></figure>
<p>注意，如果变量里有 <code>:</code>,则需要加引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo: &quot;&#123;&#123; variable &#125;&#125;&quot;</div></pre></td></tr></table></figure></p>
<h1 id="Playbook-基本用法"><a href="#Playbook-基本用法" class="headerlink" title="Playbook 基本用法"></a>Playbook 基本用法</h1><p>最基本的 playbook 分为三部分：</p>
<ol>
<li>在什么机器上以什么身份执行<ul>
<li>hosts</li>
<li>users</li>
</ul>
</li>
<li>定义 playbook 执行需要的变量<ul>
<li>variable</li>
</ul>
</li>
<li>执行的任务是都有什么<ul>
<li>tasks</li>
</ul>
</li>
<li>善后的任务是什么<ul>
<li>handlers  </li>
</ul>
</li>
</ol>
<p><strong>执行 Playbook</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 执行playbook</div><div class="line">Ansible-playbook user.yaml</div><div class="line"></div><div class="line">// 查看详细输出</div><div class="line">ansible-playbook user.yaml --list-hosts</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h3><p>要学习更多的 playbook 用法，可以通过<a href="http://github.com/ansible/ansible-examples" target="_blank" rel="external">Playbooks 官方示例</a>。</p>
<h3 id="Playbook-分享平台"><a href="#Playbook-分享平台" class="headerlink" title="Playbook 分享平台"></a>Playbook 分享平台</h3><p>Ansible 提供了一个 Playbook 的分享平台，上面的例子是有 Ansible 使用者自己上传的。<br><a href="http://galaxy.ansible.com/" target="_blank" rel="external">Ansible分享平台</a></p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><ul>
<li>创建用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 新增一个用户</div><div class="line">cat user.yaml</div><div class="line">---</div><div class="line">- name: create user           </div><div class="line">  hosts: all                \\ host or group</div><div class="line">  user: root</div><div class="line">  gather_facts: false</div><div class="line">  vars:                     \\ variable</div><div class="line">  - user: &quot;charlie&quot;</div><div class="line">  tasks:                     \\ tasks</div><div class="line">  - name: create user</div><div class="line">    user: name= &quot;&#123;&#123; user &#125;&#125;&quot;</div><div class="line">    notify: create user ok</div><div class="line">  handlers:</div><div class="line">    - name: create user ok</div><div class="line">      debug: msg= &quot;Create User OK&quot;</div></pre></td></tr></table></figure>
<ol>
<li>name 参数对该 playbook 实现功能的一个概述，后面执行过程中会打印 name 变量值</li>
<li>hosts 参数指定了那些主机</li>
<li>user 参数执行了使用什么用户登陆远程主机</li>
<li>gather_facts 参数指定了下面任务执行前，是否先执行 setup 模块获取主机相关信息，这些后面 task 会使用 setup 获取的信息</li>
<li>vars 参数指定了变量， 变量 user，值为 charlie，值得注意的是参数要用引号</li>
<li>task 指定了一个任务，下面的 name 参数同样是对任务的描述，在执行过程中打印出来。user 指定了调用 user模块，name 是user模块中的参数，增加的用户名是上面 user 的值</li>
</ol>
<p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ansible-playbook user.yaml</div><div class="line">PLAY [create user] *************************************************************</div><div class="line"></div><div class="line">TASK [create user] *************************************************************</div><div class="line">changed: [172.16.11.210]</div><div class="line">changed: [172.16.11.211]</div><div class="line"></div><div class="line">RUNNING HANDLER [create user] **************************************************</div><div class="line">ok: [172.16.11.210] =&gt; &#123;</div><div class="line">    &quot;msg&quot;: &quot;Create User OK&quot;</div><div class="line">&#125;</div><div class="line">ok: [172.16.11.211] =&gt; &#123;</div><div class="line">    &quot;msg&quot;: &quot;Create User OK&quot;</div><div class="line">&#125;</div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">172.16.11.210              : ok=1    changed=1    unreachable=0    failed=0   </div><div class="line">172.16.11.211              : ok=1    changed=1    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<ul>
<li>安装apache</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cat apache.yaml</div><div class="line">---</div><div class="line">- hosts: all</div><div class="line"> vars:</div><div class="line">   http_port: 80</div><div class="line">   max_clients: 2048</div><div class="line"> user: root</div><div class="line"> tasks:</div><div class="line"> - name: ensure apache is at latest version</div><div class="line">   yum: pkg=httpd state=latest</div><div class="line"> - name: write the apache config file</div><div class="line">   template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class="line">   notify:</div><div class="line">   - restart apache</div><div class="line"> - name: ensure apache is running</div><div class="line">   service: name=httpd state=started</div><div class="line"> handlers:</div><div class="line">   - name: restart apache</div><div class="line">     service: name=httpd state=restarted</div></pre></td></tr></table></figure>
<h2 id="主机和用户-Host-and-User"><a href="#主机和用户-Host-and-User" class="headerlink" title="主机和用户 Host and User"></a>主机和用户 Host and User</h2><p>在执行 playbook 时，可以选择操作的目标主机是那些，以那个用户执行<br>host 行的内容是一个或多个主机的 patterns， 以逗号分隔<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: 172.16.11.210, 172.16.11.211, [all]</div><div class="line">  remote_user: root</div></pre></td></tr></table></figure></p>
<p>还可以在每个 task 中，定义远程执行用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: all</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">  - name: test connection</div><div class="line">    ping:</div><div class="line">    remote_user: root</div></pre></td></tr></table></figure></p>
<p>也支持 sudo 方法,在 task中同样支持,在 sudo 需要密码时，可以加上选项 –ask-sudo-pass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: all</div><div class="line">  remote_user: charlie</div><div class="line">  sudo: yes</div><div class="line">  task：</div><div class="line">    - service： name=nginx state=started</div><div class="line">      sudo: yes</div><div class="line">      sudo_user: root</div></pre></td></tr></table></figure></p>
<h2 id="任务列表-Tasks"><a href="#任务列表-Tasks" class="headerlink" title="任务列表 Tasks"></a>任务列表 Tasks</h2><ul>
<li>tasks 是从上到下顺序执行，如果中间发生错误，整个 playbook 便会中断。</li>
<li>每一个 task 是对module的一次调用,通常会带有特定参数，参数可以使用变量。</li>
<li>每一个 task 必须有一个 name 属性，name 值会在命令行中输出，以提示用户，如果没有定义，aciton 的值会作为输出信息来标记task</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - name: make sure apache is running</div><div class="line">    service: name=httpd state=running</div><div class="line"></div><div class="line">// 如果参数过长，可以使用空格或者缩进分隔为多行</div><div class="line">tasks:</div><div class="line">  - name: copy ansible inventory file to client</div><div class="line">    copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts</div><div class="line">          owner=root group=root mode=0644</div><div class="line"></div><div class="line">// 或者使用 yaml 的字典作为参数</div><div class="line">tasks:</div><div class="line">  - name: copy ansible inventory file to client</div><div class="line">    copy:</div><div class="line">      src: /etc/ansible/hosts</div><div class="line">      dest: /etc/ansible/hosts</div><div class="line">      owner: root</div><div class="line">      group: root</div><div class="line">      mode: 0644</div><div class="line"></div><div class="line">// 大部分的模块都是使用 `key-value` 这种格式的，其中有两个比较特殊，command 和 shell 模块。</div><div class="line">tasks:</div><div class="line">  - name: disable selinux</div><div class="line">    command: /sbin/setenforce 0</div><div class="line">tasks:</div><div class="line">  - name: run this command and ignore the result</div><div class="line">    shell: /usr/bin/command || /bin/true</div><div class="line">tasks:</div><div class="line">  - name: run some command and ignore the reslut</div><div class="line">    shell: /usr/bin/somecommadn</div><div class="line">    ignore_error: True</div></pre></td></tr></table></figure>
<h3 id="执行状态"><a href="#执行状态" class="headerlink" title="执行状态"></a>执行状态</h3><p>task 中每个 action 会调用一个 module，在 module 中会去检查当前系统状态是否需要重新执行，具体判断需要有各个 module 自己来实现。</p>
<ul>
<li>如果执行那么 action 会得到返回值 changed；</li>
<li>如果部执行，那么 action 会得到返回值 OK</li>
</ul>
<p><strong>状态实例 以一个 copy 文件为例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// playbook</div><div class="line">copy.yaml                 </div><div class="line">---</div><div class="line">- name: copy a test file</div><div class="line">  hosts: all</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">    - name: copy a test file to /opt/ansible</div><div class="line">      copy: src=/opt/ansible/test.txt dest=/opt/ansible/</div><div class="line"></div><div class="line">// 第一次执行结果</div><div class="line">ansible-playbook copy.yaml</div><div class="line">PLAY [copy a test file] ********************************************************</div><div class="line"></div><div class="line">TASK [setup] *******************************************************************</div><div class="line">ok: [172.16.11.211]</div><div class="line">ok: [172.16.11.210]</div><div class="line"></div><div class="line">TASK [copy a test file to /opt/ansible] ****************************************</div><div class="line">changed: [172.16.11.210]</div><div class="line">changed: [172.16.11.211]</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">172.16.11.210              : ok=2    changed=1    unreachable=0    failed=0   </div><div class="line">172.16.11.211              : ok=2    changed=1    unreachable=0    failed=0   </div><div class="line"></div><div class="line">// 第二次执行结果</div><div class="line">ansible-playbook copy.yaml</div><div class="line"></div><div class="line">PLAY [copy a test file] ********************************************************</div><div class="line"></div><div class="line">TASK [setup] *******************************************************************</div><div class="line">ok: [172.16.11.211]</div><div class="line">ok: [172.16.11.210]</div><div class="line"></div><div class="line">TASK [copy a test file to /opt/ansible] ****************************************</div><div class="line">ok: [172.16.11.210]</div><div class="line">ok: [172.16.11.211]</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">172.16.11.210              : ok=2    changed=0    unreachable=0    failed=0   </div><div class="line">172.16.11.211              : ok=2    changed=0    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<p>可以看到第一次 task的状态是 changed 状态，第二次再次执行，task 状态是 OK，说明文件已经存在，避免 ansible 再次重复执行。</p>
<h2 id="响应事件-Handler"><a href="#响应事件-Handler" class="headerlink" title="响应事件 Handler"></a>响应事件 Handler</h2><h3 id="什么是-handler"><a href="#什么是-handler" class="headerlink" title="什么是 handler"></a>什么是 handler</h3><p>每个主流的变成语言都会有 event 机制，那么 handler 就是 playbook 的 event。Handler 里面的每个 handler，也是对 module 的一次调用。不同的是 handler 不会默认的按照顺序执行。<br>Tasks 中的任务是有状态的，changed 或者 ok。 在 Ansible 中，只有 task 的执行状态为 changed 时，才会触发，这就是 handler。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>如果在 tasks 中修改了某个服务的配置文件，就需要重新启动服务，重新启动服务就可以设计成为一个 handler</p>
<h3 id="触发Handlers"><a href="#触发Handlers" class="headerlink" title="触发Handlers"></a>触发Handlers</h3><p><strong>只有 action 是 changed 时，才会执行 handler</strong></p>
<ul>
<li>第一次执行时，tasks 的状态是 changed， 回触发 handler</li>
<li>第二次执行时，task 的状态是 OK， 那么就不会触发 handler</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">// 一个 handler 最多被执行一次,在任务执行中，有多个 task notify 同一个 handler， 那么只执行一次</div><div class="line">---</div><div class="line">- name: handler state</div><div class="line">  hosts: all</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">    random_number1: &quot;&#123;&#123; 10 | random &#125;&#125;&quot;</div><div class="line">    random_number2: &quot;&#123;&#123; 100 | random &#125;&#125;&quot;</div><div class="line">  tasks:</div><div class="line">  - name: Copy the /etc/hosts to /opt/ansible/host.&#123;&#123; random_number1 &#125;&#125;</div><div class="line">    copy: src=/etc/hosts dest=/opt/ansible/host.&#123;&#123; random_number1 &#125;&#125;</div><div class="line">    notify:</div><div class="line">      - call in every action</div><div class="line">  - name: Copy the /etc/hosts to /opt/ansible/host.&#123;&#123; random_number2 &#125;&#125;</div><div class="line">    copy: src=/etc/hosts dest=/opt/ansible/host.&#123;&#123; random_number2 &#125;&#125;</div><div class="line">    notify:</div><div class="line">      - call in every action</div><div class="line">  handlers:</div><div class="line">    - name: call in every action</div><div class="line">      debug: msg=&apos;call in every action, but execute only one time&apos;</div><div class="line"></div><div class="line">// 按照 handler 的定义顺序执行,handlers 是按照在 handlers 中定义的顺序执行的， 而不是按照 notify 的顺序执行的</div><div class="line">// notify 的定义顺序是 3 &gt; 2 &gt; 1，而实际 handler 结果是 handler 定义的顺序 1 &gt; 2 &gt; 3。</div><div class="line">cat handler_notify.yaml                 </div><div class="line">---</div><div class="line">- hosts: all</div><div class="line">  gather_facts: no</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">    random_number1: &quot;&#123;&#123; 10 | random &#125;&#125;&quot;</div><div class="line">    random_number2: &quot;&#123;&#123; 100 | random &#125;&#125;&quot;</div><div class="line">    random_number3: &quot;&#123;&#123; 1000 | random &#125;&#125;&quot;</div><div class="line">  tasks:</div><div class="line">    - name: copy the /ets/hosts to /tmp/hosts.&#123;&#123; random_number1 &#125;&#125;</div><div class="line">      copy: src=/etc/hosts dest=/tmp/hosts.&#123;&#123; random_number1 &#125;&#125;</div><div class="line">      notify:</div><div class="line">        - define the 3nd handler</div><div class="line"></div><div class="line">    - name: copy the /ets/hosts to /tmp/hosts.&#123;&#123; random_number2 &#125;&#125;</div><div class="line">      copy: src=/etc/hosts dest=/tmp/hosts.&#123;&#123; random_number2 &#125;&#125;</div><div class="line">      notify:</div><div class="line">        - define the 2nd handler</div><div class="line"></div><div class="line">    - name: copy the /ets/hosts to /tmp/hosts.&#123;&#123; random_number3 &#125;&#125;</div><div class="line">      copy: src=/etc/hosts dest=/tmp/hosts.&#123;&#123; random_number3 &#125;&#125;</div><div class="line">      notify:</div><div class="line">        - define the 1nd handler</div><div class="line">  handlers:</div><div class="line">    - name: define the 1nd handler</div><div class="line">      debug: msg=&quot; defind the 1nd handler&quot;</div><div class="line"></div><div class="line">    - name: define the 2nd handler</div><div class="line">      debug: msg=&quot; defind the 2nd handler&quot;</div><div class="line"></div><div class="line">    - name: define the 3nd handler</div><div class="line">      debug: msg=&quot; defind the 3nd handler&quot;</div></pre></td></tr></table></figure>
<h1 id="playbook-roles-和-include"><a href="#playbook-roles-和-include" class="headerlink" title="playbook roles 和 include"></a>playbook roles 和 include</h1><p>在刚开始使用 playbook 时，习惯性会把 playbook 写成一个很大的文件，然而在实际情况下， 有些文件是可以重用的。playbook 可以使用 include，把其他 playbook 文件中的 variables、tasks 或者 handlers 从其他文件拉取过来。</p>
<h2 id="规划目录组织结构"><a href="#规划目录组织结构" class="headerlink" title="规划目录组织结构"></a>规划目录组织结构</h2><p>通过目录规格，可以使 playbook 模块化，使代码易读、可以重用、层次清晰。</p>
<p>可以通过 <code>ansible-galaxy</code> 工具，初始化一个 role 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// init</div><div class="line">ansible-galaxy init httpd</div><div class="line"></div><div class="line">// tree</div><div class="line">.</div><div class="line">├── defaults</div><div class="line">│   └── main.yml</div><div class="line">├── files</div><div class="line">├── handlers</div><div class="line">│   └── main.yml</div><div class="line">├── meta</div><div class="line">│   └── main.yml</div><div class="line">├── README.md</div><div class="line">├── tasks</div><div class="line">│   └── main.yml</div><div class="line">├── templates</div><div class="line">├── tests</div><div class="line">│   ├── inventory</div><div class="line">│   └── test.yml</div><div class="line">└── vars</div><div class="line">    └── main.yml</div></pre></td></tr></table></figure></p>
<h2 id="include-语句"><a href="#include-语句" class="headerlink" title="include 语句"></a>include 语句</h2><h3 id="普通用法"><a href="#普通用法" class="headerlink" title="普通用法"></a>普通用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 可以像其他 include 语句一样， 直接include</div><div class="line"># possibly saved as tasks/firewall_httpd_default.yaml</div><div class="line">- name: insert firewalld rule for httpd</div><div class="line">  firewalld: port=80/tcp permanent=true state=enable immediate=yes</div><div class="line"></div><div class="line">// main.yml</div><div class="line">tasks:</div><div class="line">  - include: tasks/firewall_httpd_default.yml</div></pre></td></tr></table></figure>
<h3 id="高级用法，传递参数"><a href="#高级用法，传递参数" class="headerlink" title="高级用法，传递参数"></a>高级用法，传递参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 添加参数</div><div class="line">tasks:</div><div class="line">  - include: tasks/firewall.yml port=80</div><div class="line">  - include: tasks/firewall.yml port=3306</div><div class="line"></div><div class="line">//  支持结构化</div><div class="line">tasks:</div><div class="line">  - include: tasks/firewall.yml</div><div class="line">    vars:</div><div class="line">      wp_user: charlie</div><div class="line">      ssh_key:</div><div class="line">        - key/one.txt</div><div class="line">        - key/two.txt</div><div class="line">// json格式</div><div class="line">tasks:</div><div class="line">  - &#123; include: wordpress.yml, wp_user: timmy, ssh_keys: [ &apos;key/one.txt&apos;, &apos;key/two.txt&apos; ] &#125;</div></pre></td></tr></table></figure>
<h3 id="在-handlers-section-中定义"><a href="#在-handlers-section-中定义" class="headerlink" title="在 handlers section 中定义"></a>在 handlers section 中定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// handlers.yml</div><div class="line">// this might be in a file line handlers/handlers.yml</div><div class="line">- name: restart apache</div><div class="line">  service: name = apache state=restarted</div><div class="line">// 在一个 playbook 中引用 handlers.yml</div><div class="line">handlers:</div><div class="line">  - include: handlers/handlers.yml</div></pre></td></tr></table></figure>
<p>include 语句可以和其他非 include 的 tasks 和 handlers 混合使用。</p>
<p><strong>例如：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- name: this is a play at the top level of a file</div><div class="line">  host: all</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">    - name: say hi</div><div class="line">      tags: foo</div><div class="line">      shell: echo &quot;Hi &quot;</div><div class="line">- include: load_balancers.yml</div><div class="line">- include: webservers.yml</div><div class="line">- include: dbservers.yml</div></pre></td></tr></table></figure></p>
<h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><p>Ansible 中还有一个比 include 更为强大的代码重用机制，那就是roles！。Roles 基于一个已知的文件结构，去自动加载某些 var_files, tasks, handlers，基于 roles 对内容进行分组，更有利于与其他用户分享 roles。<br>Ansible提供了一个分享role的平台, <a href="http://galaxy.ansible.com/" target="_blank" rel="external">http://galaxy.ansible.com/</a>, 在galaxy上可以找到别人写好的role.</p>
<h3 id="Roled的目录结构"><a href="#Roled的目录结构" class="headerlink" title="Roled的目录结构"></a>Roled的目录结构</h3><p>在 ansible 中，通过遵循特定的目录结构，可以实现对 role 的定义。下面的目录结构是定义了两个 role， 一个名字是 common，另外一个是 webserver，并在 site.yml 中调用这两个 role。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// role 的目录结构</div><div class="line">site.yml</div><div class="line">webservers.yml</div><div class="line">fooservers.yml</div><div class="line">roles/</div><div class="line">   common/</div><div class="line">     files/</div><div class="line">     templates/</div><div class="line">     tasks/</div><div class="line">     handlers/</div><div class="line">     vars/</div><div class="line">     defaults/</div><div class="line">     meta/</div><div class="line">   webservers/</div><div class="line">     files/</div><div class="line">     templates/</div><div class="line">     tasks/</div><div class="line">     handlers/</div><div class="line">     vars/</div><div class="line">     defaults/</div><div class="line">     meta/</div><div class="line"></div><div class="line">// site.yml 中使用</div><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  roles:</div><div class="line">    - common</div><div class="line">    - webservers</div></pre></td></tr></table></figure></p>
<h3 id="使用带参数的-role"><a href="#使用带参数的-role" class="headerlink" title="使用带参数的 role"></a>使用带参数的 role</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  roles:</div><div class="line">    - common</div><div class="line">    - &#123; role: foo_app_instance, dir: &apos;/opt/a&apos;, port: 5000 &#125;</div><div class="line">    - &#123; role: foo_app_instance, dir: &apos;/opt/b&apos;, port: 5001 &#125;</div><div class="line">// 设置触发条件,条件语句应用到 role 中的每个 task上。</div><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  roles:</div><div class="line">    - &#123; role: some_role, when: &quot;ansible_os_family == &apos;RedHat&apos;&quot; &#125;</div><div class="line">// 分配 tags</div><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  roles:</div><div class="line">    - &#123; role: foo, tags: [ &quot;bar&quot; , &quot;baz&quot; ] &#125;</div></pre></td></tr></table></figure>
<h3 id="指定默认的参数"><a href="#指定默认的参数" class="headerlink" title="指定默认的参数"></a>指定默认的参数</h3><p>在指定默认参数后，如果在调用时传参数，那么就使用传入的参数值，否则使用默认参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//指定默认参数</div><div class="line">main.yml</div><div class="line">roles:</div><div class="line">  role_with_var</div><div class="line">    tasks:</div><div class="line">      main.yml</div><div class="line">    vars:</div><div class="line">      main.yml</div><div class="line">// roles/role_with_var/vars/main.yml</div><div class="line">param: &quot;I am the default value&quot;</div></pre></td></tr></table></figure></p>
<h3 id="与条件语句一起执行"><a href="#与条件语句一起执行" class="headerlink" title="与条件语句一起执行"></a>与条件语句一起执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//定义只有在 RedHat 系列才执行的 role</div><div class="line">---</div><div class="line">- host: webservers</div><div class="line">  roles:</div><div class="line">    - &#123; role: some_role, when: &quot;ansible_os_family == &apos;RedHat&apos;&quot; &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Playbooks&quot;&gt;&lt;a href=&quot;#Playbooks&quot; class=&quot;headerlink&quot; title=&quot;Playbooks&quot;&gt;&lt;/a&gt;Playbooks&lt;/h1&gt;&lt;p&gt;Playbooks 是 Ansible 的配置、部署、编排语言，相当于控制远程主机的
    
    </summary>
    
      <category term="运维自动化" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Ansible" scheme="http://czero000.github.io/categories/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/Ansible/"/>
    
    
      <category term="ansible" scheme="http://czero000.github.io/tags/ansible/"/>
    
  </entry>
  
</feed>
